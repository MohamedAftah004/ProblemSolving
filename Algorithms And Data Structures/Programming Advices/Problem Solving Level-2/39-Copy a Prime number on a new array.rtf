{\rtf1\ansi\ansicpg1252\cocoartf2639
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fmodern\fcharset0 Courier;\f1\fmodern\fcharset0 Courier-Oblique;}
{\colortbl;\red255\green255\blue255;\red173\green169\blue32;\red32\green32\blue32;\red88\green118\blue71;
\red191\green100\blue38;\red166\green165\blue220;\red153\green168\blue186;\red133\green96\blue154;\red86\green132\blue173;
\red254\green187\blue91;\red78\green122\blue119;}
{\*\expandedcolortbl;;\csgenericrgb\c67843\c66275\c12549;\csgenericrgb\c12549\c12549\c12549;\csgenericrgb\c34510\c46275\c27843;
\csgenericrgb\c74902\c39216\c14902;\csgenericrgb\c65098\c64706\c86275;\csgenericrgb\c60000\c65882\c72941;\csgenericrgb\c52157\c37647\c60392;\csgenericrgb\c33725\c51765\c67843;
\csgenericrgb\c99608\c73333\c35686;\csgenericrgb\c30588\c47843\c46667;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs26 \cf2 \cb3 #include \cf4 <iostream>\
\cf2 #include \cf4 <cmath>\
\cf5 using namespace \cf6 std\cf5 ;\
\
enum \cf6 enPrimeOrNot\cf7 \{
\f1\i \cf8 Print 
\f0\i0 \cf7 = \cf9 1 \cf5 , 
\f1\i \cf8 NotPrime 
\f0\i0 \cf7 = \cf9 2\cf7 \}\cf5 ;\
\
\cf6 enPrimeOrNot \cf10 CheckPrime\cf7 (\cf5 int \cf7 number )\{\
\
    \cf5 int \cf7 m = round(number / \cf9 2\cf7 )\cf5 ;\
\
    for\cf7 (\cf5 int \cf7 counter = \cf9 2 \cf5 ; \cf7 counter <= m \cf5 ; \cf7 counter++ )\{\
\
        \cf5 if\cf7 (number % counter == \cf9 0\cf7 )\{\
\
            \cf5 return \cf6 enPrimeOrNot\cf7 ::
\f1\i \cf8 NotPrime
\f0\i0 \cf5 ;\
\
        \cf7 \}\
\cf5 return \cf6 enPrimeOrNot\cf7 ::
\f1\i \cf8 Print
\f0\i0 \cf5 ;\
    \cf7 \}\
\
\
\}\
\
\
\cf5 int \cf10 RandomNumber\cf7 (\cf5 int \cf7 from \cf5 , int \cf7 to)\{\
\
    \cf5 int \cf7 RandNum = rand() % (to - from + \cf9 1\cf7 ) + from\cf5 ;\
\
    return \cf7 RandNum\cf5 ;\
\cf7 \}\
\
\cf5 void \cf10 FillArrayWithRandomNumbers\cf7 (\cf5 int \cf7 arr[\cf9 100\cf7 ] \cf5 , int \cf7 &arrLength)\{\
\
    cout \cf11 << \cf4 "Enter number of elements : "\cf5 ;\
    \cf7 cin \cf11 >> \cf7 arrLength\cf5 ;\
\
    for\cf7 (\cf5 int \cf7 i = \cf9 0 \cf5 ; \cf7 i < arrLength \cf5 ; \cf7 i++)\{\
\
        arr[i] = RandomNumber(\cf9 1\cf5 ,\cf9 10\cf7 )\cf5 ;\
\
    \cf7 \}\
\
\}\
\
\cf5 void \cf10 PrintArray\cf7 (\cf5 int \cf7 arr[\cf9 100\cf7 ] \cf5 , int \cf7 arrLength)\{\
\
    \cf5 for\cf7 (\cf5 int \cf7 i = \cf9 0 \cf5 ; \cf7 i < arrLength \cf5 ; \cf7 i++)\{\
\
        cout \cf11 << \cf7 arr[i] \cf11 << \cf4 "  "\cf5 ;\
\
    \cf7 \}\
cout \cf11 << \cf7 endl \cf5 ;\
\cf7 \}\
\
\cf5 void \cf10 AddArrayElements\cf7 (\cf5 int \cf7 number \cf5 , int \cf7 arr[\cf9 100\cf7 ] \cf5 , int \cf7 &arrLength)\{\
\
    arrLength++\cf5 ;\
    \cf7 arr[arrLength- \cf9 1\cf7 ] = number\cf5 ;\
\
\cf7 \}\
\
\cf5 void \cf10 CopyOnlyPrimeNumbers\cf7 (\cf5 int \cf7 arrSource [\cf9 100\cf7 ] \cf5 , int \cf7 arrDestenation[\cf9 100\cf7 ] \cf5 , int \cf7 arrLength \cf5 , int \cf7 &arrDestenationLength)\{\
\
    \cf5 for\cf7 (\cf5 int \cf7 i = \cf9 0 \cf5 ; \cf7 i < arrLength \cf5 ; \cf7 i++)\
        \cf5 if\cf7 (CheckPrime(arrSource[i]) == \cf6 enPrimeOrNot\cf7 ::
\f1\i \cf8 Print 
\f0\i0 \cf7 )\{\
            AddArrayElements(arrSource[i] \cf5 , \cf7 arrDestenation \cf5 , \cf7 arrDestenationLength)\cf5 ;\
\
\
    \cf7 \}\
\
\}\
\
\cf5 int \cf10 main \cf7 ()\{\
\
    \cf5 int \cf7 arr[\cf9 100\cf7 ] \cf5 ,  \cf7 arrLength = \cf9 0 \cf5 , \cf7 arr2Length = \cf9 0 \cf5 ;\
\
    \cf7 FillArrayWithRandomNumbers(arr \cf5 , \cf7 arrLength)\cf5 ;\
    int \cf7 arr2[\cf9 100\cf7 ]\cf5 ;\
\
    \cf7 CopyOnlyPrimeNumbers(arr \cf5 , \cf7 arr2 \cf5 , \cf7 arrLength \cf5 , \cf7 arr2Length)\cf5 ;\
\
    \cf7 cout \cf11 << \cf4 "Array 1 elements : \cf5 \\n\cf4 "\cf5 ;\
    \cf7 PrintArray(arr\cf5 ,\cf7 arrLength)\cf5 ;\
\
    \cf7 cout \cf11 << \cf4 "Array 2 after copy Prime numbers : \cf5 \\n\cf4 "\cf5 ;\
    \cf7 PrintArray(arr2\cf5 ,\cf7 arr2Length)\cf5 ;\
\
    \cf7 cout \cf11 << \cf7 endl \cf5 ;\
\
\
    return \cf9 0\cf5 ;\
\cf7 \}\
}