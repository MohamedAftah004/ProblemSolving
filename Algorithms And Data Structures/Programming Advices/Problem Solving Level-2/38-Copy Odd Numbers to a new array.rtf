{\rtf1\ansi\ansicpg1252\cocoartf2639
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fmodern\fcharset0 Courier;}
{\colortbl;\red255\green255\blue255;\red173\green169\blue32;\red32\green32\blue32;\red88\green118\blue71;
\red191\green100\blue38;\red166\green165\blue220;\red254\green187\blue91;\red153\green168\blue186;\red86\green132\blue173;
\red78\green122\blue119;\red125\green122\blue28;}
{\*\expandedcolortbl;;\csgenericrgb\c67843\c66275\c12549;\csgenericrgb\c12549\c12549\c12549;\csgenericrgb\c34510\c46275\c27843;
\csgenericrgb\c74902\c39216\c14902;\csgenericrgb\c65098\c64706\c86275;\csgenericrgb\c99608\c73333\c35686;\csgenericrgb\c60000\c65882\c72941;\csgenericrgb\c33725\c51765\c67843;
\csgenericrgb\c30588\c47843\c46667;\csgenericrgb\c49020\c47843\c10980;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs26 \cf2 \cb3 #include \cf4 <iostream>\
\cf5 using namespace \cf6 std\cf5 ;\
\
int \cf7 RandomNumber\cf8 (\cf5 int \cf8 from \cf5 , int \cf8 to)\{\
\
    \cf5 int \cf8 RandNumber = rand() % (to - from + \cf9 1 \cf8 ) + from\cf5 ;\
    return \cf8 RandNumber\cf5 ;\
\
\cf8 \}\
\
\cf5 void \cf7 FillArrayWithRandomNumbers\cf8 (\cf5 int \cf8 arr[\cf9 100\cf8 ] \cf5 , int \cf8 &arrLength)\{\
\
    cout \cf10 << \cf4 "Enter number of elements : "\cf5 ;\
    \cf8 cin \cf10 >> \cf8 arrLength\cf5 ;\
\
    for \cf8 (\cf5 int \cf8 i = \cf9 0 \cf5 ; \cf8 i < arrLength \cf5 ; \cf8 i++)\{\
\
        arr[i] = RandomNumber(\cf9 1 \cf5 , \cf9 100\cf8 ) \cf5 ;\
\
    \cf8 \}\
\
\}\
\
\cf5 void \cf7 PrintArray\cf8 (\cf5 int \cf8 arr[\cf9 100\cf8 ] \cf5 , int \cf8 arrLength)\{\
\
    \cf5 for\cf8 (\cf5 int \cf8 i = \cf9 0 \cf5 ; \cf8 i < arrLength \cf5 ; \cf8 i++)\{\
\
        cout \cf10 << \cf8 arr[i] \cf10 << \cf4 "  "\cf5 ;\
\
    \cf8 \}\
    cout \cf10 << \cf4 "\cf5 \\n\cf4 "\cf5 ;\
\
\cf8 \}\
\
\cf5 void \cf7 AddArrayElements\cf8 (\cf5 int \cf8 number \cf5 , int \cf8 arr[\cf9 100\cf8 ] \cf5 , int \cf8 &arrLength)\{\
\
    arrLength++\cf5 ;\
    \cf8 arr[arrLength - \cf9 1\cf8 ] = number \cf5 ;\
\
\cf8 \}\
\
\
\cf5 void \cf7 CopyOddNumbers\cf8 (\cf5 int \cf8 arrSource[\cf9 100\cf8 ] \cf5 , int \cf8 arrDestenation[\cf9 100\cf8 ] \cf5 , int \cf8 arrLength \cf5 , int \cf8 &arrDestenationLength)\{\
\
    \cf5 for\cf8 (\cf5 int \cf8 i = \cf9 0 \cf5 ; \cf8 i <arrLength \cf5 ; \cf8 i++)\{\
\
    \cf5 if\cf8 (arrSource[i] % \cf9 2 \cf8 == \cf9 0\cf8 )\{\
\
        AddArrayElements(arrSource[i] \cf5 , \cf8 arrDestenation \cf5 , \cf8 arrDestenationLength)\cf5 ;\
\
    \cf8 \}\
\
\
    \}\
\
\
\}\
\
\
\cf5 int \cf7 main \cf8 ()\{\
    srand((\cf5 unsigned\cf8 )time(\cf11 NULL\cf8 ))\cf5 ;\
\
    int \cf8 arr[\cf9 100\cf8 ] \cf5 , \cf8 arrLength = \cf9 0 \cf5 , \cf8 arr2Length = \cf9 0\cf5 ;\
\
    \cf8 FillArrayWithRandomNumbers(arr \cf5 , \cf8 arrLength)\cf5 ;\
\
    int \cf8 arr2[\cf9 100\cf8 ] \cf5 ;\
\
    \cf8 CopyOddNumbers(arr \cf5 , \cf8 arr2 \cf5 , \cf8 arrLength \cf5 , \cf8 arr2Length)\cf5 ;\
\
    \cf8 cout \cf10 << \cf4 "Array 1 elements : \cf5 \\n\cf4 "\cf5 ;\
    \cf8 PrintArray(arr \cf5 , \cf8 arrLength)\cf5 ;\
\
    \cf8 cout \cf10 << \cf4 "\cf5 \\n\cf4 Array 2 odd numbers : \cf5 \\n\cf4 "\cf5 ;\
    \cf8 PrintArray(arr2 \cf5 , \cf8 arr2Length)\cf5 ;\
\
\
    return \cf9 0\cf5 ;\
\cf8 \}\
}