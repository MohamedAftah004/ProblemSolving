{\rtf1\ansi\ansicpg1252\cocoartf2709
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 #pragma once\
#include <iostream>\
#include <string>\
#include "clsPerson.h"\
#include "clsString.h"\
#include <vector>\
#include <fstream>\
#include "clsDate.h"\
#include "clsUtil.h";\
\
using namespace std;\
class clsUsers : public clsPerson\
\{\
private:\
\
    enum enMode \{ EmptyMode = 0, UpdateMode = 1, AddNewMode = 2 \};\
    enMode _Mode;\
    string _UserName;\
    string _Password;\
    int _Permissions;\
\
    bool _MarkedForDelete = false;\
\
    struct stLoginRegisterRecord;\
    static stLoginRegisterRecord _ConvertLoginRegisterLineToRecord(string Line, string Seperator = "#//#")\
    \{\
        stLoginRegisterRecord LoginRegisterRecord;\
\
        vector<string>vLoginRegisterRecord = clsString::Split(Line, Seperator);\
\
        LoginRegisterRecord.DateTime = vLoginRegisterRecord[0];\
        LoginRegisterRecord.UserName = vLoginRegisterRecord[1];\
        LoginRegisterRecord.Password = clsUtil::HardDecryption(vLoginRegisterRecord[2]);\
        LoginRegisterRecord.Permissions = stoi(vLoginRegisterRecord[3]);\
\
\
        return LoginRegisterRecord;\
\
    \}\
\
    string _PrepareLogInRecord(string Seperator = "#//#")\
    \{\
        string LoginRecord = "";\
        LoginRecord += clsDate::GetSystemDateTimeString() + Seperator;\
        LoginRecord += UserName + Seperator;\
        LoginRecord += clsUtil::HardDecryption(Password) + Seperator;\
        LoginRecord += to_string(Permissions);\
        return LoginRecord;\
    \}\
\
    static clsUsers _ConvertLinetoUserObject(string Line, string Seperator = "#//#")\
    \{\
        vector<string> vUserData;\
        vUserData = clsString::Split(Line, Seperator);\
\
        return clsUsers(enMode::UpdateMode, vUserData[0], vUserData[1], vUserData[2],\
            vUserData[3], vUserData[4], clsUtil::HardDecryption(vUserData[5]), stoi(vUserData[6]));\
\
    \}\
\
    static string _ConverUserObjectToLine(clsUsers User, string Seperator = "#//#")\
    \{\
\
        string UserRecord = "";\
        UserRecord += User.FirstName + Seperator;\
        UserRecord += User.LastName + Seperator;\
        UserRecord += User.Email + Seperator;\
        UserRecord += User.Phone + Seperator;\
        UserRecord += User.UserName + Seperator;\
        UserRecord += clsUtil::HardDecryption(User.Password) + Seperator;\
        UserRecord += to_string(User.Permissions) ;\
\
        return UserRecord;\
\
    \}\
\
    static  vector <clsUsers> _LoadUsersDataFromFile()\
    \{\
\
        vector <clsUsers> vUsers;\
\
        fstream MyFile;\
        MyFile.open("Users.txt", ios::in);//read Mode\
\
        if (MyFile.is_open())\
        \{\
\
            string Line;\
\
\
            while (getline(MyFile, Line))\
            \{\
\
                clsUsers User = _ConvertLinetoUserObject(Line);\
\
                vUsers.push_back(User);\
            \}\
\
            MyFile.close();\
\
        \}\
\
        return vUsers;\
\
    \}\
\
    static void _SaveUsersDataToFile(vector <clsUsers> vUsers)\
    \{\
\
        fstream MyFile;\
        MyFile.open("Users.txt", ios::out);//overwrite\
\
        string DataLine;\
\
        if (MyFile.is_open())\
        \{\
\
            for (clsUsers U : vUsers)\
            \{\
                if (U.MarkedForDeleted() == false)\
                \{\
                    //we only write records that are not marked for delete.  \
                    DataLine = _ConverUserObjectToLine(U);\
                    MyFile << DataLine << endl;\
\
                \}\
\
            \}\
\
            MyFile.close();\
\
        \}\
\
    \}\
\
    void _Update()\
    \{\
        vector <clsUsers> _vUsers;\
        _vUsers = _LoadUsersDataFromFile();\
\
        for (clsUsers& U : _vUsers)\
        \{\
            if (U.UserName == UserName)\
            \{\
                U = *this;\
                break;\
            \}\
\
        \}\
\
        _SaveUsersDataToFile(_vUsers);\
\
    \}\
\
    void _AddNew()\
    \{\
\
        _AddDataLineToFile(_ConverUserObjectToLine(*this));\
    \}\
\
    void _AddDataLineToFile(string  stDataLine)\
    \{\
        fstream MyFile;\
        MyFile.open("Users.txt", ios::out | ios::app);\
\
        if (MyFile.is_open())\
        \{\
\
            MyFile << stDataLine << endl;\
\
            MyFile.close();\
        \}\
\
    \}\
\
    static clsUsers _GetEmptyUserObject()\
    \{\
        return clsUsers(enMode::EmptyMode, "", "", "", "", "", "", 0);\
    \}\
\
public:\
\
    enum enPermissions \{\
        eAll = -1, pListClients = 1, pAddNewClient = 2, pDeleteClient = 4,\
        pUpdateClients = 8, pFindClient = 16, pTransaction = 32, pManageUsers = 64, pLoginRegister = 128\
    \};\
\
    struct stLoginRegisterRecord\
    \{\
        string DateTime;\
        string UserName;\
        string Password;\
        int Permissions;\
\
    \};\
\
    clsUsers(enMode Mode, string FirstName, string LastName,\
        string Email, string Phone, string UserName, string Password,\
        int Permissions) :\
        clsPerson(FirstName, LastName, Email, Phone)\
\
    \{\
        _Mode = Mode;\
        _UserName = UserName;\
        _Password = Password;\
        _Permissions = Permissions;\
    \}\
\
    bool IsEmpty()\
    \{\
        return (_Mode == enMode::EmptyMode);\
    \}\
\
    bool MarkedForDeleted()\
    \{\
        return _MarkedForDelete;\
    \}\
\
    string GetUserName()\
    \{\
        return _UserName;\
    \}\
\
    void SetUserName(string UserName)\
    \{\
        _UserName = UserName;\
    \}\
\
    __declspec(property(get = GetUserName, put = SetUserName)) string UserName;\
\
    void SetPassword(string Password)\
    \{\
        _Password = Password;\
    \}\
\
    string GetPassword()\
    \{\
        return _Password;\
    \}\
    __declspec(property(get = GetPassword, put = SetPassword)) string Password;\
\
    void SetPermissions(int Permissions)\
    \{\
        _Permissions = Permissions;\
    \}\
\
    int GetPermissions()\
    \{\
        return _Permissions;\
    \}\
    __declspec(property(get = GetPermissions, put = SetPermissions)) int Permissions;\
\
    static clsUsers Find(string UserName)\
    \{\
        fstream MyFile;\
        MyFile.open("Users.txt", ios::in);//read Mode\
\
        if (MyFile.is_open())\
        \{\
            string Line;\
            while (getline(MyFile, Line))\
            \{\
                clsUsers User = _ConvertLinetoUserObject(Line);\
                if (User.UserName == UserName)\
                \{\
                    MyFile.close();\
                    return User;\
                \}\
            \}\
\
            MyFile.close();\
\
        \}\
\
        return _GetEmptyUserObject();\
    \}\
\
    static clsUsers Find(string UserName, string Password)\
    \{\
\
        fstream MyFile;\
        MyFile.open("Users.txt", ios::in);//read Mode\
\
        if (MyFile.is_open())\
        \{\
            string Line;\
            while (getline(MyFile, Line))\
            \{\
                clsUsers User = _ConvertLinetoUserObject(Line);\
                if (User.UserName == UserName && User.Password == Password)\
                \{\
                    MyFile.close();\
                    return User;\
                \}\
\
            \}\
\
            MyFile.close();\
\
        \}\
        return _GetEmptyUserObject();\
    \}\
\
    enum enSaveResults \{ svFaildEmptyObject = 0, svSucceeded = 1, svFaildUserExists = 2 \};\
\
    enSaveResults Save()\
    \{\
\
        switch (_Mode)\
        \{\
        case enMode::EmptyMode:\
        \{\
            if (IsEmpty())\
            \{\
                return enSaveResults::svFaildEmptyObject;\
            \}\
        \}\
\
        case enMode::UpdateMode:\
        \{\
            _Update();\
            return enSaveResults::svSucceeded;\
\
            break;\
        \}\
\
        case enMode::AddNewMode:\
        \{\
            //This will add new record to file or database\
            if (clsUsers::IsUserExist(_UserName))\
            \{\
                return enSaveResults::svFaildUserExists;\
            \}\
            else\
            \{\
                _AddNew();\
                //We need to set the mode to update after add new\
                _Mode = enMode::UpdateMode;\
                return enSaveResults::svSucceeded;\
            \}\
\
            break;\
        \}\
        \}\
\
    \}\
\
    static bool IsUserExist(string UserName)\
    \{\
\
        clsUsers User = clsUsers::Find(UserName);\
        return (!User.IsEmpty());\
    \}\
\
    bool Delete()\
    \{\
        vector <clsUsers> _vUsers;\
        _vUsers = _LoadUsersDataFromFile();\
\
        for (clsUsers& U : _vUsers)\
        \{\
            if (U.UserName == _UserName)\
            \{\
                U._MarkedForDelete = true;\
                break;\
            \}\
\
        \}\
\
        _SaveUsersDataToFile(_vUsers);\
\
        *this = _GetEmptyUserObject();\
\
        return true;\
\
    \}\
\
    static clsUsers GetAddNewUserObject(string UserName)\
    \{\
        return clsUsers(enMode::AddNewMode, "", "", "", "", UserName, "", 0);\
    \}\
\
    static vector <clsUsers> GetUsersList()\
    \{\
        return _LoadUsersDataFromFile();\
    \}\
\
    bool CheckAccessPermission(enPermissions Permission)\
    \{\
        if (this->Permissions == enPermissions::eAll)\
            return true;\
\
        if ((Permission & this->Permissions) == Permission)\
            return true;\
        else\
            return false;\
\
    \}\
\
\
    void RegisterLogIn()\
    \{\
\
        string stDataLine = _PrepareLogInRecord();\
\
        fstream MyFile;\
        MyFile.open("LoginRegister.txt", ios::out | ios::app);\
\
        if (MyFile.is_open())\
        \{\
\
            MyFile << stDataLine << endl;\
\
            MyFile.close();\
        \}\
\
    \}\
\
    static  vector <stLoginRegisterRecord> GetLoginRegisterList()\
    \{\
\
        vector< stLoginRegisterRecord>vLoginRegisterList;\
\
        fstream MyFile;\
        MyFile.open("LoginRegister.txt", ios::in);\
\
        if (MyFile.is_open())\
        \{\
    \
            string Line;\
            stLoginRegisterRecord LoginRegisterRecord;\
\
            while (getline(MyFile, Line))\
            \{\
                LoginRegisterRecord = _ConvertLoginRegisterLineToRecord(Line);\
                vLoginRegisterList.push_back(LoginRegisterRecord);\
            \}\
\
\
        \}\
\
\
        return vLoginRegisterList;\
\
    \}\
\
\};\
\
\
\
}