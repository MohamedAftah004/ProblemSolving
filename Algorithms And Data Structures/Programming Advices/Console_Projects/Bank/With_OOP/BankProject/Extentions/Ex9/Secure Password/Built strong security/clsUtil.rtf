{\rtf1\ansi\ansicpg1252\cocoartf2709
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;\red128\green128\blue128;\red163\green21\blue21;\red0\green0\blue255;
\red43\green145\blue175;\red47\green79\blue79;\red0\green128\blue0;\red111\green0\blue138;\red0\green128\blue128;
}
{\*\expandedcolortbl;;\csgenericrgb\c50196\c50196\c50196;\csgenericrgb\c63922\c8235\c8235;\csgenericrgb\c0\c0\c100000;
\csgenericrgb\c16863\c56863\c68627;\csgenericrgb\c18431\c30980\c30980;\csgenericrgb\c0\c50196\c0;\csgenericrgb\c43529\c0\c54118;\csgenericrgb\c0\c50196\c50196;
}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs19 \cf2 \cb0 #pragma\cf0  \cf2 once\cf0 \
\cf2 #include\cf0  \cf3 <iostream>\cf0 \
\cf2 #include\cf0  \cf3 <string>\cf0 \
\cf2 #include\cf0  \cf3 "clsDate.h"\cf0 \
\
\cf4 using\cf0  \cf4 namespace\cf0  std;\
\
\cf4 class\cf0  \cf5 clsUtil\cf0 \
\{\
\
\cf4 public\cf0 :\
    \cf4 enum\cf0  \cf5 enCharType\cf0  \{\
        \cf6 SamallLetter\cf0  = 1, \cf6 CapitalLetter\cf0  = 2,\
        \cf6 Digit\cf0  = 3, \cf6 MixChars\cf0  = 4, \cf6 SpecialCharacter\cf0  = 5\
    \};\
\
    \cf4 static\cf0  \cf4 void\cf0   Srand()\
    \{\
        \cf7 //Seeds the random number generator in C++, called only once\cf0 \
        srand((\cf4 unsigned\cf0 )time(\cf8 NULL\cf0 ));\
    \}\
\
    \cf4 static\cf0   \cf4 int\cf0  RandomNumber(\cf4 int\cf0  \cf2 From\cf0 , \cf4 int\cf0  \cf2 To\cf0 )\
    \{\
        \cf7 //Function to generate a random number\cf0 \
        \cf4 int\cf0  randNum = rand() % (\cf2 To\cf0  - \cf2 From\cf0  + 1) + \cf2 From\cf0 ;\
        \cf4 return\cf0  randNum;\
    \}\
\
    \cf4 static\cf0  \cf4 char\cf0  GetRandomCharacter(\cf5 enCharType\cf0  \cf2 CharType\cf0 )\
    \{\
\
        \cf7 //updated this method to accept mixchars\cf0 \
        \cf4 if\cf0  (\cf2 CharType\cf0  == \cf6 MixChars\cf0 )\
        \{\
            \cf7 //Capital/Samll/Digits only\cf0 \
            \cf2 CharType\cf0  = (\cf5 enCharType\cf0 )RandomNumber(1, 3);\
\
        \}\
\
        \cf4 switch\cf0  (\cf2 CharType\cf0 )\
        \{\
\
        \cf4 case\cf0  \cf5 enCharType\cf0 ::\cf6 SamallLetter\cf0 :\
        \{\
            \cf4 return\cf0  \cf4 char\cf0 (RandomNumber(97, 122));\
            \cf4 break\cf0 ;\
        \}\
        \cf4 case\cf0  \cf5 enCharType\cf0 ::\cf6 CapitalLetter\cf0 :\
        \{\
            \cf4 return\cf0  \cf4 char\cf0 (RandomNumber(65, 90));\
            \cf4 break\cf0 ;\
        \}\
        \cf4 case\cf0  \cf5 enCharType\cf0 ::\cf6 SpecialCharacter\cf0 :\
        \{\
            \cf4 return\cf0  \cf4 char\cf0 (RandomNumber(33, 47));\
            \cf4 break\cf0 ;\
        \}\
        \cf4 case\cf0  \cf5 enCharType\cf0 ::\cf6 Digit\cf0 :\
        \{\
            \cf4 return\cf0  \cf4 char\cf0 (RandomNumber(48, 57));\
            \cf4 break\cf0 ;\
        \}\
    defualt:\
        \{\
            \cf4 return\cf0  \cf4 char\cf0 (RandomNumber(65, 90));\
            \cf4 break\cf0 ;\
        \}\
        \}\
    \}\
\
    \cf4 static\cf0   \cf5 string\cf0  GenerateWord(\cf5 enCharType\cf0  \cf2 CharType\cf0 , \cf4 short\cf0  \cf2 Length\cf0 )\
\
    \{\
        \cf5 string\cf0  Word;\
\
        \cf4 for\cf0  (\cf4 int\cf0  i = 1; i <= \cf2 Length\cf0 ; i++)\
\
        \{\
\
            Word \cf9 =\cf0  Word \cf9 +\cf0  GetRandomCharacter(\cf2 CharType\cf0 );\
\
        \}\
        \cf4 return\cf0  Word;\
    \}\
\
    \cf4 static\cf0  \cf5 string\cf0   GenerateKey(\cf5 enCharType\cf0  \cf2 CharType\cf0  = \cf6 CapitalLetter\cf0 )\
    \{\
\
        \cf5 string\cf0  Key = \cf3 ""\cf0 ;\
\
\
        Key \cf9 =\cf0  GenerateWord(\cf2 CharType\cf0 , 4) \cf9 +\cf0  \cf3 "-"\cf0 ;\
        Key \cf9 =\cf0  Key \cf9 +\cf0  GenerateWord(\cf2 CharType\cf0 , 4) \cf9 +\cf0  \cf3 "-"\cf0 ;\
        Key \cf9 =\cf0  Key \cf9 +\cf0  GenerateWord(\cf2 CharType\cf0 , 4) \cf9 +\cf0  \cf3 "-"\cf0 ;\
        Key \cf9 =\cf0  Key \cf9 +\cf0  GenerateWord(\cf2 CharType\cf0 , 4);\
\
\
        \cf4 return\cf0  Key;\
    \}\
\
    \cf4 static\cf0  \cf4 void\cf0  GenerateKeys(\cf4 short\cf0  \cf2 NumberOfKeys\cf0 , \cf5 enCharType\cf0  \cf2 CharType\cf0 )\
    \{\
\
        \cf4 for\cf0  (\cf4 int\cf0  i = 1; i <= \cf2 NumberOfKeys\cf0 ; i++)\
\
        \{\
            cout \cf9 <<\cf0  \cf3 "Key ["\cf0  \cf9 <<\cf0  i \cf9 <<\cf0  \cf3 "] : "\cf0 ;\
            cout \cf9 <<\cf0  GenerateKey(\cf2 CharType\cf0 ) \cf9 <<\cf0  endl;\
        \}\
\
    \}\
\
    \cf4 static\cf0  \cf4 void\cf0  FillArrayWithRandomNumbers(\cf4 int\cf0  \cf2 arr\cf0 [100], \cf4 int\cf0  \cf2 arrLength\cf0 , \cf4 int\cf0  \cf2 From\cf0 , \cf4 int\cf0  \cf2 To\cf0 )\
    \{\
        \cf4 for\cf0  (\cf4 int\cf0  i = 0; i < \cf2 arrLength\cf0 ; i++)\
            \cf2 arr\cf0 [i] = RandomNumber(\cf2 From\cf0 , \cf2 To\cf0 );\
    \}\
\
    \cf4 static\cf0  \cf4 void\cf0  FillArrayWithRandomWords(\cf5 string\cf0  \cf2 arr\cf0 [100], \cf4 int\cf0  \cf2 arrLength\cf0 , \cf5 enCharType\cf0  \cf2 CharType\cf0 , \cf4 short\cf0  \cf2 Wordlength\cf0 )\
    \{\
        \cf4 for\cf0  (\cf4 int\cf0  i = 0; i < \cf2 arrLength\cf0 ; i++)\
            \cf2 arr\cf0 [i] \cf9 =\cf0  GenerateWord(\cf2 CharType\cf0 , \cf2 Wordlength\cf0 );\
\
    \}\
\
    \cf4 static\cf0  \cf4 void\cf0  FillArrayWithRandomKeys(\cf5 string\cf0  \cf2 arr\cf0 [100], \cf4 int\cf0  \cf2 arrLength\cf0 , \cf5 enCharType\cf0  \cf2 CharType\cf0 )\
    \{\
        \cf4 for\cf0  (\cf4 int\cf0  i = 0; i < \cf2 arrLength\cf0 ; i++)\
            \cf2 arr\cf0 [i] \cf9 =\cf0  GenerateKey(\cf2 CharType\cf0 );\
    \}\
\
    \cf4 static\cf0   \cf4 void\cf0  Swap(\cf4 int\cf0 & \cf2 A\cf0 , \cf4 int\cf0 & \cf2 B\cf0 )\
    \{\
        \cf4 int\cf0  Temp;\
\
        Temp = \cf2 A\cf0 ;\
        \cf2 A\cf0  = \cf2 B\cf0 ;\
        \cf2 B\cf0  = Temp;\
    \}\
\
    \cf4 static\cf0   \cf4 void\cf0  Swap(\cf4 double\cf0 & \cf2 A\cf0 , \cf4 double\cf0 & \cf2 B\cf0 )\
    \{\
        \cf4 double\cf0  Temp;\
\
        Temp = \cf2 A\cf0 ;\
        \cf2 A\cf0  = \cf2 B\cf0 ;\
        \cf2 B\cf0  = Temp;\
    \}\
\
    \cf4 static\cf0   \cf4 void\cf0  Swap(\cf4 bool\cf0 & \cf2 A\cf0 , \cf4 bool\cf0 & \cf2 B\cf0 )\
    \{\
        \cf4 bool\cf0  Temp;\
\
        Temp = \cf2 A\cf0 ;\
        \cf2 A\cf0  = \cf2 B\cf0 ;\
        \cf2 B\cf0  = Temp;\
    \}\
\
    \cf4 static\cf0   \cf4 void\cf0  Swap(\cf4 char\cf0 & \cf2 A\cf0 , \cf4 char\cf0 & \cf2 B\cf0 )\
    \{\
        \cf4 char\cf0  Temp;\
\
        Temp = \cf2 A\cf0 ;\
        \cf2 A\cf0  = \cf2 B\cf0 ;\
        \cf2 B\cf0  = Temp;\
    \}\
\
    \cf4 static\cf0   \cf4 void\cf0  Swap(\cf5 string\cf0 & \cf2 A\cf0 , \cf5 string\cf0 & \cf2 B\cf0 )\
    \{\
        \cf5 string\cf0  Temp;\
\
        Temp \cf9 =\cf0  \cf2 A\cf0 ;\
        \cf2 A\cf0  \cf9 =\cf0  \cf2 B\cf0 ;\
        \cf2 B\cf0  \cf9 =\cf0  Temp;\
    \}\
\
    \cf4 static\cf0   \cf4 void\cf0  Swap(\cf5 clsDate\cf0 & \cf2 A\cf0 , \cf5 clsDate\cf0 & \cf2 B\cf0 )\
    \{\
        \cf5 clsDate\cf0 ::SwapDates(\cf2 A\cf0 , \cf2 B\cf0 );\
\
    \}\
\
    \cf4 static\cf0   \cf4 void\cf0  ShuffleArray(\cf4 int\cf0  \cf2 arr\cf0 [100], \cf4 int\cf0  \cf2 arrLength\cf0 )\
    \{\
\
        \cf4 for\cf0  (\cf4 int\cf0  i = 0; i < \cf2 arrLength\cf0 ; i++)\
        \{\
            Swap(\cf2 arr\cf0 [RandomNumber(1, \cf2 arrLength\cf0 ) - 1], \cf2 arr\cf0 [RandomNumber(1, \cf2 arrLength\cf0 ) - 1]);\
        \}\
\
    \}\
\
    \cf4 static\cf0   \cf4 void\cf0  ShuffleArray(\cf5 string\cf0  \cf2 arr\cf0 [100], \cf4 int\cf0  \cf2 arrLength\cf0 )\
    \{\
\
        \cf4 for\cf0  (\cf4 int\cf0  i = 0; i < \cf2 arrLength\cf0 ; i++)\
        \{\
            Swap(\cf2 arr\cf0 [RandomNumber(1, \cf2 arrLength\cf0 ) - 1], \cf2 arr\cf0 [RandomNumber(1, \cf2 arrLength\cf0 ) - 1]);\
        \}\
\
    \}\
\
    \cf4 static\cf0  \cf5 string\cf0   Tabs(\cf4 short\cf0  \cf2 NumberOfTabs\cf0 )\
    \{\
        \cf5 string\cf0  t = \cf3 ""\cf0 ;\
\
        \cf4 for\cf0  (\cf4 int\cf0  i = 1; i < \cf2 NumberOfTabs\cf0 ; i++)\
        \{\
            t \cf9 =\cf0  t \cf9 +\cf0  \cf3 "\\t"\cf0 ;\
            cout \cf9 <<\cf0  t;\
        \}\
        \cf4 return\cf0  t;\
\
    \}\
\
    \cf4 static\cf0  \cf5 string\cf0  NumberToText(\cf4 int\cf0  \cf2 Number\cf0 )\
    \{\
\
        \cf4 if\cf0  (\cf2 Number\cf0  == 0)\
        \{\
            \cf4 return\cf0  \cf3 ""\cf0 ;\
        \}\
\
        \cf4 if\cf0  (\cf2 Number\cf0  >= 1 && \cf2 Number\cf0  <= 19)\
        \{\
            \cf5 string\cf0  arr[] = \{ \cf3 ""\cf0 , \cf3 "One"\cf0 ,\cf3 "Two"\cf0 ,\cf3 "Three"\cf0 ,\cf3 "Four"\cf0 ,\cf3 "Five"\cf0 ,\cf3 "Six"\cf0 ,\cf3 "Seven"\cf0 ,\
        \cf3 "Eight"\cf0 ,\cf3 "Nine"\cf0 ,\cf3 "Ten"\cf0 ,\cf3 "Eleven"\cf0 ,\cf3 "Twelve"\cf0 ,\cf3 "Thirteen"\cf0 ,\cf3 "Fourteen"\cf0 ,\
          \cf3 "Fifteen"\cf0 ,\cf3 "Sixteen"\cf0 ,\cf3 "Seventeen"\cf0 ,\cf3 "Eighteen"\cf0 ,\cf3 "Nineteen"\cf0  \};\
\
            \cf4 return\cf0   arr[\cf2 Number\cf0 ] \cf9 +\cf0  \cf3 " "\cf0 ;\
\
        \}\
\
        \cf4 if\cf0  (\cf2 Number\cf0  >= 20 && \cf2 Number\cf0  <= 99)\
        \{\
            \cf5 string\cf0  arr[] = \{ \cf3 ""\cf0 ,\cf3 ""\cf0 ,\cf3 "Twenty"\cf0 ,\cf3 "Thirty"\cf0 ,\cf3 "Forty"\cf0 ,\cf3 "Fifty"\cf0 ,\cf3 "Sixty"\cf0 ,\cf3 "Seventy"\cf0 ,\cf3 "Eighty"\cf0 ,\cf3 "Ninety"\cf0  \};\
            \cf4 return\cf0   arr[\cf2 Number\cf0  / 10] \cf9 +\cf0  \cf3 " "\cf0  \cf9 +\cf0  NumberToText(\cf2 Number\cf0  % 10);\
        \}\
\
        \cf4 if\cf0  (\cf2 Number\cf0  >= 100 && \cf2 Number\cf0  <= 199)\
        \{\
            \cf4 return\cf0   \cf3 "One Hundred "\cf0  \cf9 +\cf0  NumberToText(\cf2 Number\cf0  % 100);\
        \}\
\
        \cf4 if\cf0  (\cf2 Number\cf0  >= 200 && \cf2 Number\cf0  <= 999)\
        \{\
            \cf4 return\cf0    NumberToText(\cf2 Number\cf0  / 100) \cf9 +\cf0  \cf3 "Hundreds "\cf0  \cf9 +\cf0  NumberToText(\cf2 Number\cf0  % 100);\
        \}\
\
        \cf4 if\cf0  (\cf2 Number\cf0  >= 1000 && \cf2 Number\cf0  <= 1999)\
        \{\
            \cf4 return\cf0   \cf3 "One Thousand "\cf0  \cf9 +\cf0  NumberToText(\cf2 Number\cf0  % 1000);\
        \}\
\
        \cf4 if\cf0  (\cf2 Number\cf0  >= 2000 && \cf2 Number\cf0  <= 999999)\
        \{\
            \cf4 return\cf0    NumberToText(\cf2 Number\cf0  / 1000) \cf9 +\cf0  \cf3 "Thousands "\cf0  \cf9 +\cf0  NumberToText(\cf2 Number\cf0  % 1000);\
        \}\
\
        \cf4 if\cf0  (\cf2 Number\cf0  >= 1000000 && \cf2 Number\cf0  <= 1999999)\
        \{\
            \cf4 return\cf0   \cf3 "One Million "\cf0  \cf9 +\cf0  NumberToText(\cf2 Number\cf0  % 1000000);\
        \}\
\
        \cf4 if\cf0  (\cf2 Number\cf0  >= 2000000 && \cf2 Number\cf0  <= 999999999)\
        \{\
            \cf4 return\cf0    NumberToText(\cf2 Number\cf0  / 1000000) \cf9 +\cf0  \cf3 "Millions "\cf0  \cf9 +\cf0  NumberToText(\cf2 Number\cf0  % 1000000);\
        \}\
\
        \cf4 if\cf0  (\cf2 Number\cf0  >= 1000000000 && \cf2 Number\cf0  <= 1999999999)\
        \{\
            \cf4 return\cf0   \cf3 "One Billion "\cf0  \cf9 +\cf0  NumberToText(\cf2 Number\cf0  % 1000000000);\
        \}\
        \cf4 else\cf0 \
        \{\
            \cf4 return\cf0    NumberToText(\cf2 Number\cf0  / 1000000000) \cf9 +\cf0  \cf3 "Billions "\cf0  \cf9 +\cf0  NumberToText(\cf2 Number\cf0  % 1000000000);\
        \}\
\
\
    \}\
\
\
    \cf4 static\cf0  \cf5 string\cf0   EncryptText(\cf5 string\cf0  \cf2 Text\cf0 , \cf4 short\cf0  \cf2 EncryptionKey\cf0  = 2)\
    \{\
\
        \cf4 for\cf0  (\cf4 int\cf0  i = 0; i <= \cf2 Text\cf0 .length(); i++)\
        \{\
\
            \cf2 Text\cf9 [\cf0 i\cf9 ]\cf0  = \cf4 char\cf0 ((\cf4 int\cf0 )\cf2 Text\cf9 [\cf0 i\cf9 ]\cf0  + \cf2 EncryptionKey\cf0 );\
\
        \}\
\
        \cf4 return\cf0  \cf2 Text\cf0 ;\
\
    \}\
\
    \cf4 static\cf0  \cf5 string\cf0   DecryptText(\cf5 string\cf0  \cf2 Text\cf0 , \cf4 short\cf0  \cf2 EncryptionKey\cf0  = 2)\
    \{\
\
        \cf4 for\cf0  (\cf4 int\cf0  i = 0; i <= \cf2 Text\cf0 .length(); i++)\
        \{\
\
            \cf2 Text\cf9 [\cf0 i\cf9 ]\cf0  = \cf4 char\cf0 ((\cf4 int\cf0 )\cf2 Text\cf9 [\cf0 i\cf9 ]\cf0  - \cf2 EncryptionKey\cf0 );\
\
        \}\
        \cf4 return\cf0  \cf2 Text\cf0 ;\
\
    \}\
\
    \cf4 static\cf0  \cf5 string\cf0  HardEncryption(\cf5 string\cf0  \cf2 Text\cf0 , \cf4 short\cf0  \cf2 EncryptionKey\cf0  = 2)\
    \{\
\
        \cf4 for\cf0  (\cf4 int\cf0  i = 0; i <= \cf2 Text\cf0 .length(); i++)\
        \{\
\
            \cf2 Text\cf9 [\cf0 i\cf9 ]\cf0  = \cf4 char\cf0 ((\cf4 int\cf0 )\cf2 Text\cf9 [\cf0 i\cf9 ]\cf0  + (\cf2 EncryptionKey\cf0  * i - 3));\
\
        \}\
\
        \cf4 return\cf0  \cf2 Text\cf0 ;\
    \}\
\
    \cf4 static\cf0  \cf5 string\cf0  HardDecryption(\cf5 string\cf0  \cf2 Text\cf0 , \cf4 short\cf0  \cf2 DecryptionKey\cf0  = 2)\
    \{\
\
        \cf4 for\cf0  (\cf4 int\cf0  i = 0; i <= \cf2 Text\cf0 .length(); i++)\
        \{\
\
            \cf2 Text\cf9 [\cf0 i\cf9 ]\cf0  = \cf4 char\cf0 ((\cf4 int\cf0 )\cf2 Text\cf9 [\cf0 i\cf9 ]\cf0  - (\cf2 DecryptionKey\cf0  * i - 3));\
\
        \}\
\
        \cf4 return\cf0  \cf2 Text\cf0 ;\
    \}\
\
\
\
\};\
\
}