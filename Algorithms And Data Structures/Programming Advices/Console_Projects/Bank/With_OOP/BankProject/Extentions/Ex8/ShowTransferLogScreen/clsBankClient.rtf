{\rtf1\ansi\ansicpg1252\cocoartf2709
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 #pragma once\
#include <iostream>\
#include <string>\
#include "clsPerson.h"\
#include "clsString.h"\
#include <vector>\
#include <fstream>\
#include <iomanip>\
#include "clsUtility.h";\
#include "clsInputValidate.h"\
\
\
\
using namespace std;\
class clsBankClient : public clsPerson\
\{\
private:\
\
    enum enMode \{ EmptyMode = 0, UpdateMode = 1, AddNewMode = 2 \};\
    enMode _Mode;\
\
\
    string _AccountNumber;\
    string _PinCode;\
    float _AccountBalance;\
    bool _MarkedForDelete = false;\
\
\
\
    static clsBankClient _ConvertLinetoClientObject(string Line, string Seperator = "#//#")\
    \{\
        vector<string> vClientData;\
        vClientData = clsString::Split(Line, Seperator);\
\
        return clsBankClient(enMode::UpdateMode, vClientData[0], vClientData[1], vClientData[2],\
            vClientData[3], vClientData[4], vClientData[5], stod(vClientData[6]));\
\
    \}\
\
    static string _ConverClientObjectToLine(clsBankClient Client, string Seperator = "#//#")\
    \{\
\
        string stClientRecord = "";\
        stClientRecord += Client.FirstName + Seperator;\
        stClientRecord += Client.LastName + Seperator;\
        stClientRecord += Client.Email + Seperator;\
        stClientRecord += Client.Phone + Seperator;\
        stClientRecord += Client.AccountNumber() + Seperator;\
        stClientRecord += Client.PinCode + Seperator;\
        stClientRecord += to_string(Client.AccountBalance);\
\
        return stClientRecord;\
\
    \} \
\
    static  vector <clsBankClient> _LoadClientsDataFromFile()\
    \{\
\
        vector <clsBankClient> vClients;\
\
        fstream MyFile;\
        MyFile.open("Clients.txt", ios::in);//read Mode\
\
        if (MyFile.is_open())\
        \{\
\
            string Line;\
\
\
            while (getline(MyFile, Line))\
            \{\
\
                clsBankClient Client = _ConvertLinetoClientObject(Line);\
\
                vClients.push_back(Client);\
            \}\
\
            MyFile.close();\
\
        \}\
\
        return vClients;\
\
    \}\
\
    static void _SaveCleintsDataToFile(vector <clsBankClient> vClients)\
    \{\
\
        fstream MyFile;\
        MyFile.open("Clients.txt", ios::out);//overwrite\
\
        string DataLine;\
\
        if (MyFile.is_open())\
        \{\
\
            for (clsBankClient C : vClients)\
            \{\
                if (C.MarkedForDeleted() == false)\
                \{\
                    //we only write records that are not marked for delete.  \
                    DataLine = _ConverClientObjectToLine(C);\
                    MyFile << DataLine << endl;\
\
                \}\
\
            \}\
\
            MyFile.close();\
\
        \}\
\
    \}\
\
    void _Update()\
    \{\
        vector <clsBankClient> _vClients;\
        _vClients = _LoadClientsDataFromFile();\
\
        for (clsBankClient& C : _vClients)\
        \{\
            if (C.AccountNumber() == AccountNumber())\
            \{\
                C = *this;\
                break;\
            \}\
\
        \}\
\
        _SaveCleintsDataToFile(_vClients);\
\
    \}\
\
    void _AddNew()\
    \{\
\
        _AddDataLineToFile(_ConverClientObjectToLine(*this));\
    \}\
\
    void _AddDataLineToFile(string  stDataLine)\
    \{\
        fstream MyFile;\
        MyFile.open("Clients.txt", ios::out | ios::app);\
\
        if (MyFile.is_open())\
        \{\
\
            MyFile << stDataLine << endl;\
\
            MyFile.close();\
        \}\
\
    \}\
\
    static clsBankClient _GetEmptyClientObject()\
    \{\
        return clsBankClient(enMode::EmptyMode, "", "", "", "", "", "", 0);\
    \}\
\
\
    string _PrepareTransferLogRecord(float Amount, clsBankClient DestinationClient, string UserName, string Seperator = "#//#")\
    \{\
\
        string TransferLogRecord = "";\
\
        TransferLogRecord += clsDate::GetSystemDateTimeString() + Seperator;\
        TransferLogRecord += AccountNumber() + Seperator;\
        TransferLogRecord += DestinationClient.AccountNumber() + Seperator;\
        TransferLogRecord += to_string(Amount) + Seperator;\
        TransferLogRecord += to_string(AccountBalance) + Seperator;\
        TransferLogRecord += to_string(DestinationClient.AccountBalance) + Seperator;\
        TransferLogRecord += CurrentUser.UserName;\
\
        return TransferLogRecord;\
    \}\
\
    void _RegisterTransferLog(float Amount, clsBankClient DestinationClient, string UserName)\
    \{\
\
        fstream MyFile;\
        MyFile.open("TransferLog.txt", ios::out | ios::app);\
\
        if (MyFile.is_open())\
        \{\
\
            string Line = _PrepareTransferLogRecord(Amount, DestinationClient, UserName);\
            MyFile << Line << endl;\
            MyFile.close();\
        \}\
\
    \}\
\
\
    struct stTransferLog ;\
    static stTransferLog _ConvertDataLineToTransferRecord(string Line , string Seperator = "#//#")\
    \{\
        vector<string>vTransLog = clsString::Split(Line, Seperator);\
        stTransferLog TransLog;\
\
        TransLog.Date = vTransLog[0];\
        TransLog.SourceAccountNumber = vTransLog[1];\
        TransLog.DestinationAccountNumber = vTransLog[2];\
        TransLog.Amount = stod(vTransLog[3]);\
        TransLog.SourceAccountBalance = stod(vTransLog[4]);\
        TransLog.DestinationAccountBalance = stod(vTransLog[5]);\
        TransLog.UserName = vTransLog[6];\
\
        return TransLog;\
    \}\
\
\
\
\
\
public:\
\
\
    static struct stTransferLog \{\
        string Date, SourceAccountNumber, DestinationAccountNumber , UserName;\
        double Amount, SourceAccountBalance, DestinationAccountBalance;\
        \
    \};\
\
    clsBankClient(enMode Mode, string FirstName, string LastName,\
        string Email, string Phone, string AccountNumber, string PinCode,\
        float AccountBalance) :\
        clsPerson(FirstName, LastName, Email, Phone)\
\
    \{\
        _Mode = Mode;\
        _AccountNumber = AccountNumber;\
        _PinCode = PinCode;\
        _AccountBalance = AccountBalance;\
\
    \}\
\
    bool IsEmpty()\
    \{\
        return (_Mode == enMode::EmptyMode);\
    \}\
\
    bool MarkedForDeleted()\
    \{\
        return _MarkedForDelete;\
    \}\
\
    string AccountNumber()\
    \{\
        return _AccountNumber;\
    \}\
\
    void SetPinCode(string PinCode)\
    \{\
        _PinCode = PinCode;\
    \}\
\
    string GetPinCode()\
    \{\
        return _PinCode;\
    \}\
    __declspec(property(get = GetPinCode, put = SetPinCode)) string PinCode;\
\
    void SetAccountBalance(float AccountBalance)\
    \{\
        _AccountBalance = AccountBalance;\
    \}\
\
    float GetAccountBalance()\
    \{\
        return _AccountBalance;\
    \}\
    __declspec(property(get = GetAccountBalance, put = SetAccountBalance)) float AccountBalance;\
\
    /*\
    No UI Related Code Inside Object\
\
    void Print()\
    \{\
        cout << "\\nClient Card:";\
        cout << "\\n___________________";\
        cout << "\\nFirstName   : " << FirstName;\
        cout << "\\nLastName    : " << LastName;\
        cout << "\\nFull Name   : " << FullName();\
        cout << "\\nEmail       : " << Email;\
        cout << "\\nPhone       : " << Phone;\
        cout << "\\nAcc. Number : " << _AccountNumber;\
        cout << "\\nPassword    : " << _PinCode;\
        cout << "\\nBalance     : " << _AccountBalance;\
        cout << "\\n___________________\\n";\
\
    \}\
    */\
    static clsBankClient Find(string AccountNumber)\
    \{\
\
\
        fstream MyFile;\
        MyFile.open("Clients.txt", ios::in);//read Mode\
\
        if (MyFile.is_open())\
        \{\
            string Line;\
            while (getline(MyFile, Line))\
            \{\
                clsBankClient Client = _ConvertLinetoClientObject(Line);\
                if (Client.AccountNumber() == AccountNumber)\
                \{\
                    MyFile.close();\
                    return Client;\
                \}\
\
            \}\
\
            MyFile.close();\
\
        \}\
\
        return _GetEmptyClientObject();\
    \}\
\
    static clsBankClient Find(string AccountNumber, string PinCode)\
    \{\
\
\
\
        fstream MyFile;\
        MyFile.open("Clients.txt", ios::in);//read Mode\
\
        if (MyFile.is_open())\
        \{\
            string Line;\
            while (getline(MyFile, Line))\
            \{\
                clsBankClient Client = _ConvertLinetoClientObject(Line);\
                if (Client.AccountNumber() == AccountNumber && Client.PinCode == PinCode)\
                \{\
                    MyFile.close();\
                    return Client;\
                \}\
\
            \}\
\
            MyFile.close();\
\
        \}\
        return _GetEmptyClientObject();\
    \}\
\
    enum enSaveResults \{ svFaildEmptyObject = 0, svSucceeded = 1, svFaildAccountNumberExists = 2 \};\
\
    enSaveResults Save()\
    \{\
\
        switch (_Mode)\
        \{\
        case enMode::EmptyMode:\
        \{\
            if (IsEmpty())\
            \{\
\
                return enSaveResults::svFaildEmptyObject;\
\
            \}\
\
        \}\
\
        case enMode::UpdateMode:\
        \{\
\
\
            _Update();\
\
            return enSaveResults::svSucceeded;\
\
            break;\
        \}\
\
        case enMode::AddNewMode:\
        \{\
            //This will add new record to file or database\
            if (clsBankClient::IsClientExist(_AccountNumber))\
            \{\
                return enSaveResults::svFaildAccountNumberExists;\
            \}\
            else\
            \{\
                _AddNew();\
\
                //We need to set the mode to update after add new\
                _Mode = enMode::UpdateMode;\
                return enSaveResults::svSucceeded;\
            \}\
\
            break;\
        \}\
        \}\
\
\
\
    \}\
\
    static bool IsClientExist(string AccountNumber)\
    \{\
\
        clsBankClient Client1 = clsBankClient::Find(AccountNumber);\
        return (!Client1.IsEmpty());\
    \}\
\
    bool Delete()\
    \{\
        vector <clsBankClient> _vClients;\
        _vClients = _LoadClientsDataFromFile();\
\
        for (clsBankClient& C : _vClients)\
        \{\
            if (C.AccountNumber() == _AccountNumber)\
            \{\
                C._MarkedForDelete = true;\
                break;\
            \}\
\
        \}\
\
        _SaveCleintsDataToFile(_vClients);\
\
        *this = _GetEmptyClientObject();\
\
        return true;\
\
    \}\
\
    static clsBankClient GetAddNewClientObject(string AccountNumber)\
    \{\
        return clsBankClient(enMode::AddNewMode, "", "", "", "", AccountNumber, "", 0);\
    \}\
\
\
    static vector<clsBankClient>GetClientsList()\
    \{\
        return _LoadClientsDataFromFile();\
    \}\
\
   static double CalculateTotalBalances()\
    \{\
\
        vector<clsBankClient>vClients = clsBankClient::GetClientsList();\
\
        double TotalBalances = 0;\
\
        for (clsBankClient C : vClients)\
        \{\
            TotalBalances += C.AccountBalance;\
        \}\
        \
        return TotalBalances;\
\
    \}\
\
\
   void Deposit(double Amount)\
   \{\
\
       _AccountBalance += Amount;\
       Save();\
\
   \}\
   bool Withdraw(double Amount)\
   \{\
\
       if (Amount > _AccountBalance)\
       \{\
\
           return false;\
\
       \}\
       else\
       \{ \
       _AccountBalance -= Amount;\
       Save();\
       \}\
\
\
   \}\
\
\
   bool Transfer(double Amount , clsBankClient &DestinationClient , string UserName)\
   \{\
\
\
       Withdraw(Amount);\
       DestinationClient.Deposit(Amount);\
       _RegisterTransferLog(Amount, DestinationClient, UserName);\
\
       return true;\
\
   \}\
\
\
   static vector<stTransferLog>GetListTransferLog()\
   \{\
\
       vector<stTransferLog>vTransferLogs;\
\
       fstream MyFile;\
       MyFile.open("TransferLog.txt", ios::in);\
\
       if (MyFile.is_open())\
       \{\
\
           string Line;\
           stTransferLog TransferLog;\
\
           while (getline(MyFile, Line))\
           \{\
               TransferLog = _ConvertDataLineToTransferRecord(Line);\
               vTransferLogs.push_back(TransferLog);\
           \}\
           MyFile.close();\
       \}\
\
       return vTransferLogs;\
   \}\
\
\
\
\};\
\
}