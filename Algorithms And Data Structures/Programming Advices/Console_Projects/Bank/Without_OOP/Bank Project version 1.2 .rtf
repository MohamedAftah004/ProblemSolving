{\rtf1\ansi\ansicpg1252\cocoartf2708
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 #include <iostream>\
#include <vector>\
#include <string>\
#include <fstream>\
#include <iomanip>\
\
using namespace std;\
\
\
struct stUser \{\
\
	string UserName;\
	string Password;\
	int Permissions;\
\
	bool MarkForDelete = false;\
\
\};\
\
enum enMainMenueOptions\
\{\
	eListClients = 1, eAddNewClient = 2,\
	eDeleteClient = 3, eUpdateClient = 4,\
	eFindClient = 5, eTransactions = 6, eManageUsers = 7, eLogout = 8\
\};\
\
enum enTransactionsMenueOptions \{ Deposit = 1, Withdrow = 2, TotalBalances = 3, MainMenue = 4 \};\
\
enum enManageUsersMenueOptions \{\
	eListUsers = 1, eAddNewUser = 2, eDeleteUser = 3, eUpdateUser = 4,\
	eFindUser = 5, eBackToMainMenue = 6\
\};\
\
enum enMainMenuePermissions\
\{\
	eAll = -1, pListClients = 1, pAddNewClient = 2, pDeleteClient = 4,\
	pUpdateClient = 8, pFindClient = 16, pTransaction = 32, pManageUsers = 64\
\};\
\
const string ClientsFileName = "Clients.txt";\
const string UsersFileName = "Users.txt";\
\
stUser CurrentUser;\
\
double DepositAmount;\
double WithdrowAmount;\
void ShowTransatcionScreen();\
void GoBackToTransactionsMenue();\
void ShowMainMenue();\
void GoBackToMainMenue();\
void ShowManageUsersMenueOptionsScreen();\
void BackToLoginScreen();\
void Login();\
\
struct stClients \{\
\
	string AccountNumber;\
	string PinCode;\
	string Name;\
	string Phone;\
	string Country;\
	double AccountBalance;\
	bool MarkForDelete = false;\
\
\};\
\
\
//&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&\
// important functions ###\
vector<string>SplitString(string S1, string delim) \{\
\
	vector<string>vString;\
\
	short pos = 0;\
	string sWord = "";\
\
	while ((pos = S1.find(delim)) != std::string::npos) \{\
\
\
		sWord = S1.substr(0, pos);\
\
		if (sWord != "") \{\
			vString.push_back(sWord);\
		\}\
\
		S1.erase(0, pos + delim.length());\
\
	\}\
\
\
	if (S1 != "")\
	\{\
		vString.push_back(S1);\
	\}\
\
\
	return vString;\
\}\
\
//Users\
stUser ConvertUsersLineToRecord(string Line, string Sperator = "#//#") \{\
\
	stUser Users;\
	vector<string>vUsers;\
	vUsers = SplitString(Line, Sperator);\
\
	Users.UserName = vUsers[0];\
	Users.Password = vUsers[1];\
	Users.Permissions = stoi(vUsers[2]);\
\
\
	return Users;\
\}\
string ConvertRecordToLineForUsers(stUser Users, string Sperator = "#//#") \{\
\
	string DataLine = "";\
\
	DataLine += Users.UserName + Sperator;\
	DataLine += Users.Password + Sperator;\
	DataLine += to_string(Users.Permissions);\
\
	return DataLine;\
\}\
vector<stUser>LoadUsersDataFromFile(string FileName) \{\
\
	vector<stUser>vUsers;\
	fstream MyFile;\
	MyFile.open(FileName, ios::in);\
\
	if (MyFile.is_open()) \{\
\
		stUser Users;\
		string Line;\
\
		while (getline(MyFile, Line)) \{\
\
			Users = ConvertUsersLineToRecord(Line);\
			vUsers.push_back(Users);\
		\}\
\
		MyFile.close();\
	\}\
\
	return vUsers;\
\}\
\
\
\
// Clients\
stClients ConvertLineToRecord(string Line, string Sperator = "#//#") \{\
\
	stClients Client;\
	vector<string>vClients;\
	vClients = SplitString(Line, Sperator);\
\
	Client.AccountNumber = vClients[0];\
	Client.PinCode = vClients[1];\
	Client.Name = vClients[2];\
	Client.Phone = vClients[3];\
	Client.Country = vClients[4];\
	Client.AccountBalance = stod(vClients[5]);\
\
	return Client;\
\}\
string ConvertRecordToLine(stClients Client, string Sperator = "#//#") \{\
\
	string DataLine = "";\
\
	DataLine += Client.AccountNumber + Sperator;\
	DataLine += Client.PinCode + Sperator;\
	DataLine += Client.Name + Sperator;\
	DataLine += Client.Phone + Sperator;\
	DataLine += Client.Country + Sperator;\
	DataLine += to_string(Client.AccountBalance);\
\
	return DataLine;\
\}\
vector<stClients>LoadClientDataFromFile(string FileName) \{\
\
	vector<stClients>vClients;\
	fstream MyFile;\
	MyFile.open(FileName, ios::in);\
\
	if (MyFile.is_open()) \{\
\
		stClients Client;\
		string Line;\
\
		while (getline(MyFile, Line)) \{\
\
			Client = ConvertLineToRecord(Line);\
			vClients.push_back(Client);\
\
		\}\
\
		MyFile.close();\
	\}\
\
	return vClients;\
\}\
\
\
//Shapes Functions ###\
// to creat '=' Marks\
string LineOfEqualMark(int NumOfMarksInOneLine) \{\
\
	string S = "";\
\
	for (int i = 0; i < NumOfMarksInOneLine; i++) \{\
\
		S += "====";\
\
	\}\
\
\
	return S;\
\}\
// to creat '-' marks\
string LineOfScoreMark(int NumOfMarksInOneLine)\
\{\
	string S = "";\
\
	for (int i = 0; i < NumOfMarksInOneLine; i++) \{\
\
		S += "----";\
\
	\}\
\
	return S;\
\}\
// to creat '_' marks\
string LineOfUnderScoreMark(int NumOfMarksInOneLine)\
\{\
	string S = "";\
\
	for (int i = 0; i < NumOfMarksInOneLine; i++) \{\
\
		S += "____";\
\
	\}\
\
	return S;\
\}\
\
\
\
// Check Access Permissions\
bool CheckAccessPermissions(enMainMenuePermissions Permissions)\
\{\
\
	if (CurrentUser.Permissions == enMainMenuePermissions::eAll)\
		return true;\
\
	if ((Permissions & CurrentUser.Permissions) == Permissions)\
		return true;\
	else\
		return false;\
\}\
\
void ShowAccessDeniedMessage()\
\{ \
	cout << "\\n------------------------------------\\n";     \
	cout << "Access Denied, \\nYou dont Have Permission To Do this,\\nPlease Conact Your Admin.";\
	cout << "\\n------------------------------------\\n";\
\}\
\
\
\
/*\
-------------------------------------------------------------------------------------\
------------------------------ A D D I N G ----------------------------------------\
-------------------------------------------------------------------------------------\
*/\
// Adding New User ###\
//********************************************************\
bool ClientExistsByAccountNumber(string AccountNumber, string FileName)\
\{\
\
	vector<stClients>vClients;\
	fstream MyFile;\
\
	MyFile.open(FileName, ios::in);\
	if (MyFile.is_open())\
	\{\
\
		string Line;\
		stClients Client;\
\
		while (getline(MyFile, Line))\
		\{\
			Client = ConvertLineToRecord(Line);\
\
			if (AccountNumber == Client.AccountNumber)\
			\{\
				MyFile.close();\
				return true;\
			\}\
\
			vClients.push_back(Client);\
		\}\
\
		MyFile.close();\
	\}\
\
	return false;\
\}\
stClients ReadNewClients() \{\
\
	stClients Client;\
\
	cout << "Enter Account Number   : ";\
	getline(cin >> ws, Client.AccountNumber);\
	while (ClientExistsByAccountNumber(Client.AccountNumber, ClientsFileName))\
	\{\
		cout << "User with [" << Client.AccountNumber << "] already exists, Enter another account : ";\
		getline(cin, Client.AccountNumber);\
	\}\
\
\
	cout << "Enter Pin Code         : ";\
	getline(cin, Client.PinCode);\
\
	cout << "Enter Name             : ";\
	getline(cin, Client.Name);\
\
	cout << "Enter Phone            : ";\
	getline(cin, Client.Phone);\
\
	cout << "Enter Country          : ";\
	getline(cin, Client.Country);\
\
	cout << "Enter Account Balance  : ";\
	cin >> Client.AccountBalance;\
\
	return Client;\
\}\
void AddDataLineToFile(string FileName, string DataLine) \{\
\
	fstream MyFile;\
	MyFile.open(FileName, ios::out | ios::app);\
\
	if (MyFile.is_open()) \{\
\
\
		MyFile << DataLine << endl;\
		MyFile.close();\
\
	\}\
\
\
\
\}\
void AddNewClient() \{\
\
	stClients Client;\
	Client = ReadNewClients();\
\
	AddDataLineToFile(ClientsFileName, ConvertRecordToLine(Client));\
\
\}\
void AddClients() \{\
\
	char AddMore = 'y';\
\
	do \{\
\
		AddNewClient();\
\
		cout << "\\n\\nClient Added Successfully , You want Add More Clients [Y/N] : ";\
		cin >> AddMore;\
\
	\} while (toupper(AddMore) == 'Y');\
\
\}\
//Action\
void ShowAddNewClientsScreen()\
\{\
\
	if (!CheckAccessPermissions(enMainMenuePermissions::pAddNewClient))\
	\{\
		ShowAccessDeniedMessage();\
		GoBackToMainMenue();\
		return;\
	\}\
\
	cout << LineOfScoreMark(10) << endl;\
\
	cout << "\\tAdd New Clients Screen \\n";\
\
	cout << LineOfScoreMark(10) << endl << endl;\
\
	AddClients();\
\}\
\
// Adding New User ###\
//********************************************************\
\
bool UserExistsByUserName(string UserName, string FileName)\
\{\
\
	vector<stUser>vUsers;\
	fstream MyFile;\
\
	MyFile.open(FileName, ios::in);\
	if (MyFile.is_open())\
	\{\
\
		string Line;\
		stUser User;\
\
		while (getline(MyFile, Line))\
		\{\
			User = ConvertUsersLineToRecord(Line);\
			if (UserName == User.UserName)\
			\{\
				MyFile.close();\
				return true;\
			\}\
\
			vUsers.push_back(User);\
		\}\
\
		MyFile.close();\
	\}\
\
	return false;\
\}\
\
// Permissions\
int ReadPermissionsToSet()\
\{\
\
	int Permissions = 0;\
	char Answer = 'n';\
\
\
	cout << "\\nDo want to give full access? y/n ? ";\
	cin >> Answer;\
	// Full Permissions\
	if (Answer == 'y' || Answer == 'Y')\
	\{\
		return -1;\
	\}\
\
\
\
\
	cout << "\\nDo you want to give access to :\\n ";\
\
	\
		// Show Clients Access\
		cout << "\\nShow Client List? y/n : ";\
		cin >> Answer;\
		if (Answer == 'y' || Answer == 'Y')\
		\{\
			Permissions += enMainMenuePermissions::pListClients;\
		\}\
	\
\
\
	// Show Clients Access\
	cout << "\\nAdd New Clients Access? y/n : ";\
	cin >> Answer;\
	if (Answer == 'y' || Answer == 'Y')\
	\{\
		Permissions += enMainMenuePermissions::pAddNewClient;\
	\}\
\
\
\
\
	// Delete Clients Access\
	cout << "\\nDelete Clients Access? y/n : ";\
	cin >> Answer;\
	if (Answer == 'y' || Answer == 'Y')\
	\{\
		Permissions += enMainMenuePermissions::pDeleteClient;\
	\}\
\
\
\
\
	// Update Clients Access\
	cout << "\\nUpdate Clients Access? y/n : ";\
	cin >> Answer;\
	if (Answer == 'y' || Answer == 'Y')\
	\{\
		Permissions += enMainMenuePermissions::pUpdateClient;\
	\}\
\
\
\
\
\
	// Transactions Access\
	cout << "\\nTransactions Menue Access? y/n : ";\
	cin >> Answer;\
	if (Answer == 'y' || Answer == 'Y')\
	\{\
		Permissions += enMainMenuePermissions::pTransaction;\
	\}\
\
\
\
\
\
	// Manage Users Access\
	cout << "\\nManage Users Access? y/n : ";\
	cin >> Answer;\
	if (Answer == 'y' || Answer == 'Y')\
	\{\
		Permissions += enMainMenuePermissions::pManageUsers;\
	\}\
\
	return Permissions;\
\
\}\
\
\
stUser ReadNewUser() \{\
\
	stUser User;\
\
	cout << "Enter User Name    : ";\
	getline(cin >> ws, User.UserName);\
\
	while (UserExistsByUserName(User.UserName, UsersFileName))\
	\{\
		cout << "\\nUser with [" << User.UserName << "] already exists, Enter another Username : ";\
		getline(cin >> ws, User.UserName);\
	\}\
\
	cout << "Enter Password     : ";\
	getline(cin, User.Password);\
\
\
	// premissions\
	User.Permissions = ReadPermissionsToSet();\
\
	return User;\
\}\
void AddNewUser() \{\
\
	stUser Users;\
	Users = ReadNewUser();\
\
	AddDataLineToFile(UsersFileName, ConvertRecordToLineForUsers(Users));\
\
\}\
void AddUsers() \{\
\
	char AddMore = 'y';\
\
	do \{\
\
		AddNewUser();\
\
		cout << "\\n\\nUser Added Successfully , You want Add More Users [Y/N] : ";\
		cin >> AddMore;\
\
	\} while (toupper(AddMore) == 'Y');\
\
\}\
//Action\
void ShowAddNewUsersScreen()\
\{\
	cout << LineOfScoreMark(10) << endl;\
\
	cout << "\\tAdd New Users  Screen \\n";\
\
	cout << LineOfScoreMark(10) << endl << endl;\
\
	AddUsers();\
\}\
\
\
\
\
\
\
/*\
-------------------------------------------------------------------------------------\
------------------------------ S H O W   +   L I S T ------------------------------\
-------------------------------------------------------------------------------------\
*/\
// Show Clients List ###\
//********************************************************\
void PrintClientRecord(stClients Client) \{\
\
	cout << "| " << setw(15) << left << Client.AccountNumber;\
	cout << "| " << setw(10) << left << Client.PinCode;\
	cout << "| " << setw(25) << left << Client.Name;\
	cout << "| " << setw(12) << left << Client.Phone;\
	cout << "| " << setw(15) << left << Client.Country;\
	cout << "| " << setw(10) << left << Client.AccountBalance;\
\
\}\
void PrintAllClientsData(vector<stClients>vClients) \{\
\
\
\
\
	cout << "\\n\\t\\t\\t\\t\\tINFO :: Clients List [" << vClients.size() << "] User(s). ";\
\
	cout << "\\n" << LineOfScoreMark(26) << endl;\
\
	cout << "| " << left << setw(15) << "UserName";\
	cout << "| " << left << setw(10) << "PinCode";\
	cout << "| " << left << setw(25) << "Name";\
	cout << "| " << left << setw(12) << "Phone";\
	cout << "| " << left << setw(15) << "Country";\
	cout << "| " << left << setw(10) << "AccountBalance ";\
\
	//Back to oprignal color\
	cout << "\\n" << LineOfScoreMark(26) << endl;\
\
\
	for (stClients Client : vClients) \{\
\
		PrintClientRecord(Client);\
		cout << endl;\
\
	\}\
\
\
	cout << LineOfScoreMark(26);\
\
\
\}\
//Action\
void ShowAllClientsDataScreen() \{\
\
\
	if (!CheckAccessPermissions(enMainMenuePermissions::pListClients))\
	\{\
		ShowAccessDeniedMessage();\
		GoBackToMainMenue();\
		return;\
	\}\
\
\
	stClients Client;\
	vector<stClients>vClients;\
	vClients = LoadClientDataFromFile(ClientsFileName);\
\
	PrintAllClientsData(vClients);\
\
\}\
\
// Show User List ###\
//********************************************************\
void PrintUsersRecord(stUser Users) \{\
\
	cout << "| " << setw(35) << left << Users.UserName;\
	cout << "| " << setw(20) << left << Users.Password;\
	cout << "| " << setw(15) << left << Users.Permissions;\
\
\}\
void PrintAllUsersData(vector<stUser>vUsers) \{\
\
\
	cout << "\\n\\t\\t\\t\\t\\tINFO :: Users List [" << vUsers.size() << "] User(s). ";\
\
	cout << "\\n" << LineOfScoreMark(26) << endl;\
\
	cout << "| " << left << setw(35) << "User Name";\
	cout << "| " << left << setw(20) << "Password";\
	cout << "| " << left << setw(15) << "Premissions";\
\
\
	cout << "\\n" << LineOfScoreMark(26) << endl;\
\
\
	for (stUser Users : vUsers) \{\
\
		PrintUsersRecord(Users);\
		cout << endl;\
\
	\}\
\
\
	cout << LineOfScoreMark(26);\
\
\
\}\
//Action\
void ShowAllUsersDataScreen() \{\
\
	stUser User;\
	vector<stUser>vUsers = LoadUsersDataFromFile(UsersFileName);\
\
	PrintAllUsersData(vUsers);\
\
\}\
\
\
\
\
\
/*\
-------------------------------------------------------------------------------------\
------------------------------ F I N D ------------------------------\
-------------------------------------------------------------------------------------\
*/\
// Find User By Account Number ###\
//********************************************************\
string ReadAccountNumber()\
\{\
	string AccNumber;\
	cout << "Enter Account Number : ";\
	getline(cin >> ws, AccNumber);\
	return AccNumber;\
\}\
bool FindClientByAccountNumber(string AccountNumber, stClients& Client) \{\
\
	system("cls");\
\
	vector<stClients>vClients;\
	vClients = LoadClientDataFromFile(ClientsFileName);\
\
	for (stClients C : vClients)\
	\{\
\
		if (C.AccountNumber == AccountNumber)\
		\{\
\
			Client = C;\
			return true;\
\
		\}\
\
	\}\
\
	return false;\
\}\
void PrintClientData(stClients Client, string AccountNumber) \{\
\
	cout << "The Following Are The User With [" << AccountNumber << "] Details :\\n\\n";\
\
	cout << "Account Number  : " << Client.AccountNumber << endl;\
	cout << "Pin Code        : " << Client.PinCode << endl;\
	cout << "Name            : " << Client.Name << endl;\
	cout << "Phone           : " << Client.Phone << endl;\
	cout << "Country         : " << Client.Country << endl;\
	cout << "Account Balance : " << Client.AccountBalance << endl;\
\
\
\
\}\
//Action\
void ShowFindCLientScreen() \{\
\
	system("cls");\
\
\
	if (!CheckAccessPermissions(enMainMenuePermissions::pFindClient))\
	\{\
		ShowAccessDeniedMessage();\
		GoBackToMainMenue();\
		return;\
	\}\
\
\
	cout << LineOfScoreMark(9) << endl;\
\
	cout << "\\tFind User Screen \\n";\
\
	cout << LineOfScoreMark(9) << endl << endl;\
\
\
	string AccountNumber = ReadAccountNumber();\
\
	stClients Client;\
\
	if (FindClientByAccountNumber(AccountNumber, Client))\
	\{\
\
		PrintClientData(Client, AccountNumber);\
\
	\}\
\
	else\
		cout << "\\nClient with account number [" << AccountNumber << "] , is not found\\n";\
\
\}\
\
// Find User By User Name ###\
//********************************************************\
string ReadUserName()\
\{\
	string UserName;\
	cout << "Enter User Name : ";\
	getline(cin >> ws, UserName);\
	return UserName;\
\}\
bool FindUserByUserName(string UserName, stUser& User) \{\
\
	vector<stUser>vUsers;\
	vUsers = LoadUsersDataFromFile(UsersFileName);\
\
	for (stUser U : vUsers)\
	\{\
\
		if (U.UserName == UserName)\
		\{\
\
			User = U;\
			return true;\
\
		\}\
\
	\}\
\
	return false;\
\}\
bool FindUserByUserNameAndPassword(string UserName , string Password , stUser& User) \{\
\
	vector<stUser>vUsers;\
	vUsers = LoadUsersDataFromFile(UsersFileName);\
\
	for (stUser U : vUsers)\
	\{\
\
		if (U.UserName == UserName && U.Password == Password)\
		\{\
\
			User = U;\
			return true;\
\
		\}\
\
	\}\
\
	return false;\
\}\
\
void PrintUserData(stUser User, string UserName) \{\
\
	cout << "The Following Are The User [" << UserName << "] Details :\\n\\n";\
\
	cout << "UserName     : " << User.UserName << endl;\
	cout << "Password     : " << User.Password << endl;\
	cout << "Permissions  : " << User.Permissions << endl;\
\
\
\}\
//Action\
void ShowFindUserScreen() \{\
\
	system("cls");\
\
\
	cout << LineOfScoreMark(9) << endl;\
\
	cout << "\\tFind User Screen \\n";\
\
	cout << LineOfScoreMark(9) << endl << endl;\
\
\
	string UserName = ReadUserName();\
\
	stUser User;\
\
	if (FindUserByUserName(UserName, User))\
	\{\
\
		PrintUserData(User, UserName);\
\
	\}\
\
	else\
		cout << "\\nUser with User Name [" << UserName << "] , is not found\\n";\
\
\}\
\
\
\
\
/*\
-------------------------------------------------------------------------------------\
------------------------------ D E L E T E ------------------------------------\
-------------------------------------------------------------------------------------\
*/\
// Delete User By Account Number ###\
//********************************************************\
void PrintClientCard(stClients Client, string AccountNumber) \{\
\
	system("cls");\
	cout << "The Following Are The User With [" << AccountNumber << "] Details :\\n\\n";\
\
	cout << "Account Number  : " << Client.AccountNumber << endl;\
	cout << "Pin Code        : " << Client.PinCode << endl;\
	cout << "Name            : " << Client.Name << endl;\
	cout << "Phone           : " << Client.Phone << endl;\
	cout << "Country         : " << Client.Country << endl;\
	cout << "Account Balance : " << Client.AccountBalance << endl;\
\
\}\
bool FindClientByAccountNumber(string AccountNumber, vector<stClients>vClients, stClients& Client) \{\
\
	for (stClients C : vClients) \{\
\
		if (AccountNumber == C.AccountNumber) \{\
\
			Client = C;\
			return true;\
\
		\}\
\
	\}\
\
	return false;\
\
\}\
bool MarkClientForDeletedByAccountNumber(string AccountNumber, vector<stClients>& vClients) \{\
\
	for (stClients& C : vClients) \{\
\
		if (C.AccountNumber == AccountNumber) \{\
\
			C.MarkForDelete = true;\
			return true;\
		\}\
\
	\}\
\
	return false;\
\}\
vector<stClients>SaveClientsDataToFile(string FileName, vector<stClients>vClients) \{\
\
	fstream MyFile;\
	MyFile.open(FileName, ios::out);\
\
	if (MyFile.is_open()) \{\
\
		for (stClients C : vClients) \{\
\
			if (C.MarkForDelete == false)\
			\{\
				string DataLine = ConvertRecordToLine(C);\
				MyFile << DataLine << endl;\
			\}\
\
		\}\
\
		MyFile.close();\
	\}\
\
	return vClients;\
\}\
bool DeleteClientByAccountNumber(string AccountNumber, vector<stClients>& vClients) \{\
\
	stClients Client;\
	char Answer = 'N';\
\
	if (FindClientByAccountNumber(AccountNumber, vClients, Client))\
	\{\
\
		PrintClientCard(Client, AccountNumber);\
\
		cout << "\\n\\nAre you sure you want delete this client [Y/N] ? ";\
		cin >> Answer;\
\
		if (Answer == 'y' || Answer == 'Y')\
		\{\
			MarkClientForDeletedByAccountNumber(AccountNumber, vClients);\
			SaveClientsDataToFile(ClientsFileName, vClients);\
			vClients = LoadClientDataFromFile(ClientsFileName);\
\
			cout << "\\n\\nClient Deleted Successfully \\n";\
\
			return true;\
		\}\
\
	\}\
	else\
	\{\
		cout << "User with account number [" << AccountNumber << "] Not Found \\n\\n";\
\
\
		return false;\
\
	\}\
\
\}\
//Action\
void ShowDeleteClientsScreen() \{\
\
\
	if (!CheckAccessPermissions(enMainMenuePermissions::pDeleteClient))\
	\{\
		ShowAccessDeniedMessage();\
		GoBackToMainMenue();\
		return;\
	\}\
\
	cout << LineOfScoreMark(10) << endl;\
\
	cout << "\\tDelete User Screen \\n";\
\
	cout << LineOfScoreMark(10) << endl << endl;\
\
	string AccountNumber = ReadAccountNumber();\
	vector<stClients>vClients = LoadClientDataFromFile(ClientsFileName);\
	DeleteClientByAccountNumber(AccountNumber, vClients);\
\
\}\
\
// Delete User By User Name ###\
//********************************************************\
void PrintUserCard(stUser User, string UserName) \{\
\
	system("cls");\
	cout << "The Following Are The User [" << UserName << "] Details :\\n\\n";\
\
	cout << "User Name       : " << User.UserName << endl;\
	cout << "Password        : " << User.Password << endl;\
	cout << "Premissions     : " << User.Permissions << endl;\
\
\
\}\
bool FindUserByUserName(string UserName, vector<stUser>vUsers, stUser& User) \{\
\
	for (stUser C : vUsers) \{\
\
		if (UserName == C.UserName) \{\
\
			User = C;\
			return true;\
\
		\}\
\
	\}\
\
	return false;\
\
\}\
bool MarkUserForDeletedByUserName(string UserName, vector<stUser>& vUsers) \{\
\
	for (stUser& C : vUsers) \{\
\
		if (C.UserName == UserName) \{\
\
			C.MarkForDelete = true;\
			return true;\
		\}\
\
	\}\
\
	return false;\
\}\
vector<stUser>SaveUsersDataToFile(string FileName, vector<stUser>vUsers) \{\
\
	fstream MyFile;\
	MyFile.open(FileName, ios::out);\
\
	if (MyFile.is_open()) \{\
\
		for (stUser C : vUsers) \{\
\
			if (C.MarkForDelete == false)\
			\{\
				string DataLine = ConvertRecordToLineForUsers(C);\
				MyFile << DataLine << endl;\
			\}\
\
		\}\
\
		MyFile.close();\
	\}\
\
	return vUsers;\
\}\
bool DeleteUserByUserName(string UserName, vector<stUser>& vUsers) \{\
\
	stUser User;\
	char Answer = 'N';\
\
	if (FindUserByUserName(UserName, vUsers, User))\
	\{\
\
		PrintUserCard(User, UserName);\
\
		cout << "\\n\\nAre you sure you want delete this client [Y/N] ? ";\
		cin >> Answer;\
\
		if (Answer == 'y' || Answer == 'Y')\
		\{\
			MarkUserForDeletedByUserName(UserName, vUsers);\
			SaveUsersDataToFile(UsersFileName, vUsers);\
			vUsers = LoadUsersDataFromFile(UsersFileName);\
\
			cout << "\\n\\nUser Deleted Successfully \\n";\
\
			return true;\
		\}\
\
	\}\
	else\
	\{\
		cout << "User with Name [" << UserName << "] Not Found \\n\\n";\
\
\
		return false;\
\
	\}\
\
\}\
//Action\
void ShowDeleteUsersScreen() \{\
\
	cout << LineOfScoreMark(10) << endl;\
\
	cout << "\\tDelete User Screen \\n";\
\
	cout << LineOfScoreMark(10) << endl << endl;\
\
	string UserName = ReadUserName();\
	vector<stUser>vUsers = LoadUsersDataFromFile(UsersFileName);\
	DeleteUserByUserName(UserName, vUsers);\
\
\}\
\
\
\
\
\
\
/*\
-------------------------------------------------------------------------------------\
------------------------------ U P D A T E ------------------------------------\
-------------------------------------------------------------------------------------\
*/\
// Update User By Account Number ###\
//********************************************************\
stClients ChangeClientRecord(string AccountNumber) \{\
\
	stClients Client;\
\
	system("cls");\
\
	cout << "Now, You have access to update client info :";\
\
	Client.AccountNumber = AccountNumber;\
\
	cout << "\\n\\nEnter Pin Code         : ";\
	getline(cin >> ws, Client.PinCode);\
\
	cout << "Enter Name             : ";\
	getline(cin, Client.Name);\
\
	cout << "Enter Phone            : ";\
	getline(cin, Client.Phone);\
\
	cout << "Enter Country          : ";\
	getline(cin, Client.Country);\
\
	cout << "Enter Account Balance  : ";\
	cin >> Client.AccountBalance;\
\
\
	return Client;\
\
\}\
bool UpdateClientByAccountNumber(string AccountNumber, vector<stClients>& vClients) \{\
\
	stClients Client;\
	char Answer = 'N';\
\
	if (FindClientByAccountNumber(AccountNumber, vClients, Client))\
	\{\
\
		PrintClientCard(Client, AccountNumber);\
\
		cout << "\\n\\nAre you sure you want Update this client [Y/N] ? ";\
		cin >> Answer;\
\
\
		if (Answer == 'y' || Answer == 'Y')\
		\{\
\
\
			for (stClients& C : vClients) \{\
\
				if (C.AccountNumber == AccountNumber) \{\
\
					C = ChangeClientRecord(AccountNumber);\
					break;\
				\}\
\
			\}\
\
\
			SaveClientsDataToFile(ClientsFileName, vClients);\
\
			cout << "\\n\\nClient Updated Successfully \\n";\
			return true;\
		\}\
\
	\}\
	else\
	\{\
\
		cout << "User with account number [" << AccountNumber << "] Not Found \\n\\n";\
		return false;\
\
	\}\
\
\
\}\
// Action\
void ShowUpdateClientsInfoScreen() \{\
\
\
	if (!CheckAccessPermissions(enMainMenuePermissions::pUpdateClient))\
	\{\
		ShowAccessDeniedMessage();\
		GoBackToMainMenue();\
		return;\
	\}\
\
\
	system("cls");\
\
	cout << LineOfScoreMark(10) << endl;\
	cout << "\\tUpdate User Screen \\n";\
	cout << LineOfScoreMark(10) << endl << endl;\
\
\
	string AccountNumber = ReadAccountNumber();\
	vector<stClients>vClients = LoadClientDataFromFile(ClientsFileName);\
	UpdateClientByAccountNumber(AccountNumber, vClients);\
\
\}\
\
\
// Update User By Account Number ###\
//********************************************************\
stUser ChangeUserRecord(string UserName) \{\
\
	stUser User;\
\
	system("cls");\
\
	cout << "Now, You have access to update client info :";\
\
	User.UserName = UserName;\
\
	cout << "\\n\\nPassword       : ";\
	getline(cin >> ws, User.Password);\
\
	cout << "Permissions       : ";\
	cin >> User.Permissions;\
\
	return User;\
\
\}\
bool UpdateUserByUserName(string UserName, vector<stUser>& vUsers) \{\
\
	stUser Client;\
	char Answer = 'N';\
\
	if (FindUserByUserName(UserName, vUsers, Client))\
	\{\
\
		PrintUserCard(Client, UserName);\
\
		cout << "\\n\\nAre you sure you want Update this client [Y/N] ? ";\
		cin >> Answer;\
\
\
		if (Answer == 'y' || Answer == 'Y')\
		\{\
\
\
			for (stUser& C : vUsers) \{\
\
				if (C.UserName == UserName) \{\
\
					C = ChangeUserRecord(UserName);\
					break;\
				\}\
\
			\}\
\
\
			SaveUsersDataToFile(UsersFileName, vUsers);\
\
			cout << "\\n\\nClient Updated Successfully \\n";\
			return true;\
		\}\
\
	\}\
	else\
	\{\
\
		cout << "User with account number [" << UserName << "] Not Found \\n\\n";\
		return false;\
\
	\}\
\
\
\}\
// Action\
void ShowUpdateUsersInfoScreen() \{\
\
	system("cls");\
\
	cout << LineOfScoreMark(10) << endl;\
	cout << "\\tUpdate User Screen \\n";\
	cout << LineOfScoreMark(10) << endl << endl;\
\
\
	string UserName = ReadUserName();\
	vector<stUser>vUsers = LoadUsersDataFromFile(UsersFileName);\
	UpdateUserByUserName(UserName, vUsers);\
\
\}\
\
\
\
\
\
// Deposit User Balance By Account Number ###\
//********************************************************\
bool FindClientByAccountNumber(string AccountNumber, stClients& Client, vector<stClients>vClients) \{\
\
	for (stClients C : vClients)\
	\{\
		if (C.AccountNumber == AccountNumber)\
		\{\
			Client = C;\
			return true;\
		\}\
	\}\
\
	return false;\
\}\
double ReadAmount(string Massage)\
\{\
	double Amount = 0;\
	cout << "\\n\\nPlease enter " << Massage << " amount : ";\
	cin >> Amount;\
	return Amount;\
\}\
stClients DepositClientAccountBalance(stClients Client, double DepositAmount)\
\{\
\
	Client.AccountBalance += DepositAmount;\
\
	return Client;\
\}\
bool AddDepositToClientByAccountNumber(string AccountNumber, vector<stClients>& vClients)\
\{\
\
	stClients Client;\
\
	char Answer = 'n';\
\
\
	if (FindClientByAccountNumber(AccountNumber, Client, vClients))\
	\{\
\
		system("cls");\
		PrintClientCard(Client, AccountNumber);\
\
\
\
\
\
		for (stClients& C : vClients)\
		\{\
\
			if (C.AccountNumber == AccountNumber)\
			\{\
				DepositAmount = ReadAmount("Deposit");\
				C = DepositClientAccountBalance(C, DepositAmount);\
				break;\
			\}\
\
		\}\
\
		cout << "\\n\\nAre you sure you want Perform this transaction [Y/N] ? ";\
\
		cin >> Answer;\
\
		if (Answer == 'y' || Answer == 'Y')\
		\{\
\
			SaveClientsDataToFile(ClientsFileName, vClients);\
\
			cout << "\\n\\nDone Successfully , New balance is [" << Client.AccountBalance + DepositAmount << "] .\\n";\
\
			return true;\
		\}\
\
	\}\
\
	else\
	\{\
		cout << "User with account number [" << AccountNumber << "] Not Found \\n\\n";\
		return false;\
	\}\
\
\}\
// Action\
void ShowDepositScreen()\
\{\
	cout << "----------------------------------\\n";\
	cout << "\\tDeposit Screen\\n";\
	cout << "----------------------------------\\n\\n";\
\
	string AccountNumber = ReadAccountNumber();\
	vector<stClients>vClients = LoadClientDataFromFile(ClientsFileName);\
	AddDepositToClientByAccountNumber(AccountNumber, vClients);\
\}\
\
\
\
// Withdrow User Balance By Account Number ###\
//********************************************************\
stClients WithdrowClientAccountBalance(stClients Client, double DepositAmount)\
\{\
\
	Client.AccountBalance -= DepositAmount;\
\
	return Client;\
\}\
bool WithDrowBalanceByAccountNumber(string AccountNumber, vector<stClients>& vClients)\
\{\
\
	stClients Client;\
\
	char Answer = 'n';\
\
\
	if (FindClientByAccountNumber(AccountNumber, Client, vClients))\
	\{\
\
		system("cls");\
		PrintClientCard(Client, AccountNumber);\
\
\
\
\
\
		for (stClients& C : vClients)\
		\{\
\
			if (C.AccountNumber == AccountNumber)\
			\{\
\
				WithdrowAmount = ReadAmount("Withdrow");\
\
				do \{\
\
					cout << "\\nAmount Exceeds the balance , you can't withdrow up to : " << C.AccountBalance << "\\n";\
					WithdrowAmount = ReadAmount("Withdrow");\
\
\
\
				\} while (WithdrowAmount > C.AccountBalance);\
\
\
				C = WithdrowClientAccountBalance(C, WithdrowAmount);\
				break;\
			\}\
\
		\}\
\
		cout << "\\n\\nAre you sure you want Perform this transaction [Y/N] ? ";\
\
		cin >> Answer;\
\
		if (Answer == 'y' || Answer == 'Y')\
		\{\
\
			SaveClientsDataToFile(ClientsFileName, vClients);\
\
			cout << "\\n\\nDone Successfully , New balance is [" << Client.AccountBalance - WithdrowAmount << "] .\\n";\
\
			return true;\
		\}\
\
	\}\
\
	else\
	\{\
		cout << "User with account number [" << AccountNumber << "] Not Found \\n\\n";\
		return false;\
	\}\
\
\}\
// Action\
void ShowWithdrowScreen()\
\{\
	cout << "----------------------------------\\n";\
	cout << "\\tWithdrow Screen\\n";\
	cout << "----------------------------------\\n\\n";\
\
	string AccountNumber = ReadAccountNumber();\
	vector<stClients>vClients = LoadClientDataFromFile(ClientsFileName);\
	WithDrowBalanceByAccountNumber(AccountNumber, vClients);\
\
\
\
\}\
\
\
\
// Total Balances ###\
//********************************************************\
void TotalBalances_PrintClientRecord(stClients Client) \{\
\
	cout << "| " << setw(15) << left << Client.AccountNumber;\
	cout << "| " << setw(30) << left << Client.Name;\
	cout << "| " << setw(15) << left << Client.AccountBalance;\
\
\}\
void TotalBalances_PrintAllClientsData(vector<stClients>vClients) \{\
\
	double TotalBalances = 0;\
\
	cout << "\\n\\t\\t\\t\\tINFO :: Balances List [" << vClients.size() << "] User(s). ";\
\
	cout << "\\n" << LineOfScoreMark(17) << endl;\
\
	cout << "| " << left << setw(15) << "UserName";\
	cout << "| " << left << setw(30) << "Name";\
	cout << "| " << left << setw(15) << "AccountBalance   ";\
\
	//Back to oprignal color\
	cout << "\\n" << LineOfScoreMark(17) << endl;\
\
\
	for (stClients Client : vClients) \{\
\
		TotalBalances_PrintClientRecord(Client);\
		cout << endl;\
		TotalBalances += Client.AccountBalance;\
	\}\
\
\
	cout << LineOfScoreMark(17);\
\
	cout << "\\n\\n\\t\\t\\tTotal Balances = " << TotalBalances << "$ \\n";\
\
\}\
//Action\
void ShowAllClientsBalancesDataScreen() \{\
\
	stClients Client;\
	vector<stClients>vClients;\
	vClients = LoadClientDataFromFile(ClientsFileName);\
\
	TotalBalances_PrintAllClientsData(vClients);\
\
\
\}\
\
\
// Go Back To Transactions Menue ###\
//********************************************************\
void GoBackToTransactionsMenue()\
\{\
\
	cout << "\\n\\nPress any key to go back to Transactions Menue...";\
	system("pause>0");\
	ShowTransatcionScreen();\
\}\
\
\
\
/*\
-------------------------------------------------------------------------------------\
------------------------------ T R A N S A C T I O N S ------------------------------\
-------------------------------------------------------------------------------------\
*/\
short ReadTransactionMenueOption()\
\{\
	short Option = 0;\
	cout << "What do you want to do [1 to 4] : ";\
	cin >> Option;\
	return Option;\
\}\
// perform Trasactions Menue Options\
void PerformTransactionMenueOptions(enTransactionsMenueOptions TransactionMenueOptions)\
\{\
\
	switch (TransactionMenueOptions)\
	\{\
\
	case enTransactionsMenueOptions::Deposit:\
	\{\
\
		system("cls");\
		ShowDepositScreen();\
		GoBackToTransactionsMenue();\
		break;\
\
	\}\
\
	case enTransactionsMenueOptions::Withdrow:\
	\{\
\
		system("cls");\
		ShowWithdrowScreen();\
		GoBackToTransactionsMenue();\
		break;\
\
	\}\
\
	case enTransactionsMenueOptions::TotalBalances:\
	\{\
\
		system("cls");\
		ShowAllClientsBalancesDataScreen();\
		GoBackToTransactionsMenue();\
		break;\
\
	\}\
\
	case enTransactionsMenueOptions::MainMenue:\
	\{\
		system("cls");\
		ShowMainMenue();\
		break;\
	\}\
\
	\}\
\
\
\}\
//Transaction screen\
void ShowTransatcionScreen()\
\{\
	system("cls");\
\
	if (!CheckAccessPermissions(enMainMenuePermissions::pTransaction))\
	\{\
		ShowAccessDeniedMessage();\
		GoBackToMainMenue();\
		return;\
	\}\
\
\
\
	cout << LineOfEqualMark(13) << endl; //===\
\
	cout << "\\t\\tTransactions Menue Screen \\n";\
\
	cout << LineOfEqualMark(13) << endl; //===\
	cout << "\\t[1] Deposit." << endl;\
	cout << "\\t[2] Withdrow." << endl;\
	cout << "\\t[3] Total Balances." << endl;\
	cout << "\\t[4] Main Menue." << endl;\
	cout << LineOfEqualMark(13) << endl; //===\
\
	PerformTransactionMenueOptions((enTransactionsMenueOptions)ReadTransactionMenueOption());\
\}\
\
\
\
// Exit ###\
void ShowEndScreen()\
\{\
	cout << "\\n\\t\\t\\t\\t\\t" << LineOfScoreMark(8) << endl;\
\
	cout << "\\t\\t\\t\\t\\t\\tProgram Ends :-) ";\
\
	cout << "\\n\\t\\t\\t\\t\\t" << LineOfScoreMark(8) << endl;\
\
	system("pause>0");\
\
	exit(0);\
\}\
\
\
\
\
\
/*\
-------------------------------------------------------------------------------------\
------------------------------ M A N A G E  +  U S E R S --------------------------\
-------------------------------------------------------------------------------------\
*/short ReadManageUsersMenueOptions()\
\{\
	short choose = 0;\
	cout << "Choose What Do You Want To Do [1 to 6] : ";\
	cin >> choose;\
	return choose;\
\}\
\
// Performing To Start Screen\
void PerformManageUsersMenueOptions(enManageUsersMenueOptions ManageUsersMenueOptions)\
\{\
\
	switch (ManageUsersMenueOptions)\
	\{\
\
		//1 - Show\
	case enManageUsersMenueOptions::eListUsers:\
	\{\
		system("cls");\
		ShowAllUsersDataScreen();\
		system("pause>0");\
		ShowManageUsersMenueOptionsScreen();\
		break;\
	\}\
\
	//2 - Add\
	case enManageUsersMenueOptions::eAddNewUser:\
	\{\
		system("cls");\
		ShowAddNewUsersScreen();\
		ShowManageUsersMenueOptionsScreen();\
		break;\
	\}\
\
	//3 - Delete\
	case enManageUsersMenueOptions::eDeleteUser:\
	\{\
		system("cls");\
		ShowDeleteUsersScreen();\
		ShowManageUsersMenueOptionsScreen();\
		break;\
	\}\
\
	//4 - Update\
	case enManageUsersMenueOptions::eUpdateUser:\
	\{\
		system("cls");\
		ShowUpdateUsersInfoScreen();\
		ShowManageUsersMenueOptionsScreen();\
		break;\
	\}\
\
	//5 - Find\
	case enManageUsersMenueOptions::eFindUser:\
	\{\
		system("cls");\
		ShowFindUserScreen();\
		system("pause>0");\
		ShowManageUsersMenueOptionsScreen();\
		break;\
	\}\
\
\
	//6 - Back \
	case enManageUsersMenueOptions::eBackToMainMenue:\
	\{\
		system("cls");\
		ShowMainMenue();\
		break;\
	\}\
\
\
	\}\
\
\
\
\}\
// Show Main Menue screen\
void ShowManageUsersMenueOptionsScreen()\
\{\
\
	system("cls");\
\
\
	if (!CheckAccessPermissions(enMainMenuePermissions::pManageUsers))\
	\{\
		ShowAccessDeniedMessage();\
		GoBackToMainMenue();\
		return;\
	\}\
\
\
	cout << LineOfEqualMark(13) << endl; //===\
	cout << "\\t\\tManage Users Menue \\n";\
	cout << LineOfEqualMark(13) << endl; //===\
\
	cout << "\\t[1] List Users." << endl;\
	cout << "\\t[2] Add New User." << endl;\
	cout << "\\t[3] Delete User." << endl;\
	cout << "\\t[4] Update User Info." << endl;\
	cout << "\\t[5] Find User." << endl;\
	cout << "\\t[6] Main Menue." << endl;\
\
	cout << LineOfEqualMark(13) << endl; //===\
\
\
	PerformManageUsersMenueOptions((enManageUsersMenueOptions)ReadManageUsersMenueOptions());\
\}\
\
\
\
\
\
\
/*\
-------------------------------------------------------------------------------------\
------------------------------ M A I N  +  M E N U E ------------------------------\
-------------------------------------------------------------------------------------\
*/\
void GoBackToMainMenue()\
\{\
\
	cout << "\\n\\nPress any key to back to Main Menue...";\
	system("pause>0");\
	ShowMainMenue();\
\
\}\
short ReadMainMenueOptions()\
\{\
	short choose = 0;\
	cout << "Choose What Do You Want To Do [1 to 7] : ";\
	cin >> choose;\
	return choose;\
\}\
// Performing To Start Screen\
void PerformMainMenueOptions(enMainMenueOptions MainMenueOptions)\
\{\
	\
	switch (MainMenueOptions)\
	\{\
\
		//1 - Show\
	case enMainMenueOptions::eListClients:\
	\{\
		system("cls");\
		ShowAllClientsDataScreen();\
		GoBackToMainMenue();\
		break;\
	\}\
	//2 - Add\
	case enMainMenueOptions::eAddNewClient:\
	\{\
		system("cls");\
		ShowAddNewClientsScreen();\
		GoBackToMainMenue();\
		break;\
	\}\
\
	//3 - Delete\
	case enMainMenueOptions::eDeleteClient:\
	\{\
		system("cls");\
		ShowDeleteClientsScreen();\
		GoBackToMainMenue();\
		break;\
	\}\
\
	//4 - Update\
	case enMainMenueOptions::eUpdateClient:\
	\{\
		system("cls");\
		ShowUpdateClientsInfoScreen();\
		GoBackToMainMenue();\
		break;\
	\}\
\
	//5 - Find\
	case enMainMenueOptions::eFindClient:\
	\{\
		system("cls");\
		ShowFindCLientScreen();\
		GoBackToMainMenue();\
		break;\
	\}\
\
	// 6 - Transactions\
	case enMainMenueOptions::eTransactions:\
	\{\
		ShowTransatcionScreen();\
		break;\
\
	\}\
\
	// 7 - Manage Users\
	case enMainMenueOptions::eManageUsers:\
	\{\
\
		ShowManageUsersMenueOptionsScreen();\
\
		break;\
	\}\
\
\
	//8 - Logout\
	case enMainMenueOptions::eLogout:\
	\{\
		system("cls");\
		cout << "Logout Successfully . press any key to Login .";\
		system("pause>0");\
		Login();		\
		break;\
	\}\
\
\
	\}\
\
\
\
\}\
// Show Main Menue screen\
void ShowMainMenue()\
\{\
\
	system("cls");\
	\
	cout << "Hi, \\"" << CurrentUser.UserName << "\\".\\n\\n";\
\
	cout << LineOfEqualMark(13) << endl; //===\
	cout << "\\t\\tMain Menue Screen \\n";\
	cout << LineOfEqualMark(13) << endl; //===\
\
	cout << "\\t[1] Show Clients List." << endl;\
	cout << "\\t[2] Add New User." << endl;\
	cout << "\\t[3] Delete User." << endl;\
	cout << "\\t[4] Update User Info." << endl;\
	cout << "\\t[5] Find User." << endl;\
	cout << "\\t[6] Transactions." << endl;\
	cout << "\\t[7] Manage Users." << endl;\
	cout << "\\t[8] Logout." << endl;\
\
	cout << LineOfEqualMark(13) << endl; //===\
\
\
	PerformMainMenueOptions((enMainMenueOptions)ReadMainMenueOptions());\
\}\
\
\
\
\
\
\
/*\
-------------------------------------------------------------------------------------\
------------------------------ L O G I N   +   S C R E A N ------------------------------\
-------------------------------------------------------------------------------------\
*/\
\
string ReadAnyThink(string Massage)\
\{\
	string S1;\
	cout << Massage << " : ";\
	getline(cin >> ws, S1);\
	return S1;\
\}\
\
\
void PrintLoginScreen()\
\{\
\
	cout << "--------------------------------\\n\\tLogin Screen\\n--------------------------------\\n\\n";\
\
\}\
\
\
\
bool LoadUserInfo(string UserName , string Password) \{\
\
\
	if (FindUserByUserNameAndPassword(UserName, Password, CurrentUser))\
		return true;\
	else\
		return false;\
\
\}\
\
\
\
\
void Login()\
\{\
\
	bool LoginFaild = false;\
	string Username,  Password;\
\
	do \{\
		system("cls");\
		PrintLoginScreen();\
\
		if (LoginFaild)\
		\{\
			cout << "Invalid Username/Password!\\n";\
		\}\
\
		cout << "Enter Username : ";\
		getline(cin >> ws, Username);\
\
		cout << "Enter Password : ";\
		cin >> Password;\
\
		LoginFaild = !LoadUserInfo(Username, Password);\
\
	\} while (LoginFaild);\
\
	ShowMainMenue();\
\
\}\
\
\
void BackToLoginScreen()\
\{\
	cout << "Logout Successfully . press any key to Login .";\
	system("pause>0");\
	Login();\
\}\
\
\
\
int main()\
\{\
\
\
	Login();\
\
	return 0;\
\}\
\
}